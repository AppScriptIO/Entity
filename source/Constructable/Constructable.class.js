"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Constructable = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _SymbolReference = require("../functionalityPrototype/Symbol.reference.js");
var _exportFunctionality = require("../functionalityPrototype/exportFunctionality.js");
var _createObjectWithDelegation = require("../utility/createObjectWithDelegation.js");
var _generatorExecutionControl = require("../utility/generatorExecutionControl.js");
var _mergeProperty = require("../utility/mergeProperty.js");var _g4, _g8;


const Reference = Object.assign(
Object.create(Object.prototype),
{
  reference: 'reference',
  prototype: Symbol('prototype'),
  class: Symbol('class'),
  metadata: _SymbolReference.metadata,
  name: Symbol('Own class name'),
  key: {
    createObjectWithDelegation: Symbol('createObjectWithDelegation'),
    constructable: Symbol('Constructable related'),
    configuredConstructor: Symbol('configured constructor related') } },


_exportFunctionality.instantiateInitialize.Reference,
_exportFunctionality.constructor.Reference,
_exportFunctionality.clientInterface.Reference);


const Prototype = Object.assign(Object.create(Object.prototype), _exportFunctionality.instantiateInitialize.Prototype, _exportFunctionality.constructor.Prototype, _exportFunctionality.clientInterface.Prototype);










Prototype[Reference.prototypeDelegation.functionality].setter.call(Prototype, {
  [Reference.key.constructable]: {
    prototype: Prototype,
    reference: Reference } });











Prototype[Reference.instantiate.functionality].setter.call(Prototype, {

  [Reference.key.createObjectWithDelegation]: _createObjectWithDelegation.createObjectWithDelegation });








Prototype[Reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.constructable]: function initializeConstuctable({ targetInstance, reference, prototype, description, construtorProperty = null } = {}) {
    if (!reference) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructable);
      reference = Object.create(prototypeDelegationSetting.reference || null);
    }
    if (!prototype) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructable);
      prototype = Object.create(prototypeDelegationSetting.prototype || null);
    }
    Object.setPrototypeOf(targetInstance, prototype);

    targetInstance[Reference.prototypeDelegation.functionality].setter.call(targetInstance, {
      [Reference.key.constructable]: {
        prototype: prototype,
        reference: reference } });


    let prototypeDelegationGetter = targetInstance[Reference.prototypeDelegation.functionality].getter.bind(targetInstance);
    (0, _mergeProperty.mergeNonexistentProperties)(targetInstance, {





      get reference() {
        return prototypeDelegationGetter(Reference.key.constructable).reference;
      },
      get [Reference.prototype]() {
        return prototypeDelegationGetter(Reference.key.constructable).prototype;
      },
      [Reference.class]: construtorProperty });

    Object.defineProperty(targetInstance, Reference.name, { writable: false, enumerable: false, value: description });

    Object.defineProperty(targetInstance, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(`${description} class`) } });
    if (!prototype.hasOwnProperty(Reference.metadata))
    Object.defineProperty(prototype, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(`${description} functionality`) } });
    return targetInstance;
  },
  [Reference.key.configuredConstructor]({ description, targetInstance, parameter = [] } = {}) {
    Object.defineProperty(targetInstance, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(description) } });
    targetInstance.parameter = parameter;
    return targetInstance;
  } });









Prototype[Reference.constructor.functionality].setter.call(Prototype, {



  [Reference.key.constructable]: (function () {let _ref = function* ({ description, reference, prototype, prototypeDelegation, self = this } = {}) {let _functionSent = yield;
      const shouldHandOverControl = _generatorExecutionControl.executionControl.shouldHandOver(_functionSent);
      prototypeDelegation || (prototypeDelegation = self[Reference.prototype]);
      const step = [

      {
        passThroughArg: { description, prototypeDelegation: prototypeDelegation },
        func: function (previousArg, arg) {var _g, _context;
          let instance = (_g = (_context = self, self[Reference.instantiate.functionality].switch).call(_context, { implementationKey: Reference.key.createObjectWithDelegation }), _g.next('intermittent') && _g.next(arg).value);
          return { instance };
        },
        condition: true },

      {
        passThroughArg: { description, reference, prototype, construtorProperty: self },
        func: function ({ instance }, arg) {var _ref4, _context2;
          _ref4 = (_context2 = self, self[Reference.initialize.functionality].switch).call(_context2, { implementationKey: Reference.key.constructable, recursiveDelegationChainExecution: true }), (
          g => {
            g.next('intermittent');

            let argumentList = Object.assign({ targetInstance: instance }, arg);
            let generator;
            do {
              generator = g.next(argumentList);
            } while (!generator.done);

          })(_ref4);
          return instance;
        },
        condition: true }];




      let i = 0,
      result;
      while (i < step.length) {
        if (step[i].condition == false) {
          i++;
          continue;
        }
        if (shouldHandOverControl) {
          _functionSent = yield step[i].passThroughArg;
          result = step[i].func(result, _functionSent);
        } else {
          result = step[i].func(result, step[i].passThroughArg);
        }
        i++;
      }
      return result;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),

  [Reference.key.configuredConstructable]({ description = 'Configured constructable instance.', self = this, parameter } = {}) {var _g2, _g3;
    let instance = (_g2 =
    self[Reference.instantiate.functionality].switch.call(self, { implementationKey: Reference.key.createObjectWithDelegation }),
    _g2.next('intermittent') && _g2.next({ description, prototypeDelegation: self }).value);
    _g3 = self[Reference.initialize.functionality].switch.call(self, { implementationKey: Reference.key.configuredConstructor }),
    _g3.next('intermittent') && _g3.next({ description, targetInstance: instance, parameter }).value;
    return instance;
  } });












const Constructable = (_g4 =
Prototype[Reference.constructor.functionality].switch.call(Prototype, { implementationKey: Reference.key.constructable }),

_g4.next('intermittent') &&
_g4.next({ description: 'Constructable', reference: Reference, prototype: Prototype }).value);exports.Constructable = Constructable;








Prototype[Reference.clientInterface.functionality].setter.call(Prototype, {





  [Reference.key.constructable]({ self = this } = {}) {
    let constructorSwitch = Constructable[Reference.constructor.functionality].switch,
    clientInterfaceSwitch = Constructable[Reference.clientInterface.functionality].switch;
    let constructorImplementation = Reference.key.constructable,
    configuredConstructableImplementation = Reference.key.configuredConstructable,
    clientInterfaceImplementation = Reference.key.constructable;

    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g5;
        if (self.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: self.parameter });
        let instance = (_g5 = constructorSwitch.call(self, { implementationKey: constructorImplementation }), _g5.next('intermittent') && _g5.next(...argumentList).value);
        return instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g6, _g7;
        let newConfiguredConstructable = (_g6 =
        constructorSwitch.call(self, { implementationKey: configuredConstructableImplementation }), _g6.next('intermittent') && _g6.next({ description: description, parameter }).value);
        let clientInterface = (_g7 = clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }), _g7.next('intermittent') && _g7.next().value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });


Constructable.clientInterface = (_g8 =
Constructable[Reference.clientInterface.functionality].switch.call(Constructable, { implementationKey: Reference.key.constructable }), _g8.next('intermittent') && _g8.next().value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,