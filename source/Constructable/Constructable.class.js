"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.Constructable = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _SymbolReference = require("../functionalityPrototype/Symbol.reference.js");
var _exportFunctionality = require("../functionalityPrototype/exportFunctionality.js");
var _createObjectWithDelegation = require("../utility/createObjectWithDelegation.js");
var _generatorExecutionControl = require("../utility/generatorExecutionControl.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var lodash = _interopRequireWildcard(require("lodash"));var _g7, _g11;


const Reference = Object.assign(
Object.create(Object.prototype),
{
  name: Symbol('Own class name'),
  class: Symbol('class'),
  reference: 'reference',
  metadata: _SymbolReference.metadata,
  key: {
    createObjectWithDelegation: Symbol('createObjectWithDelegation'),
    classInstance: Symbol('class instance related'),
    configuredClass: Symbol('Configured class/constructable related'),
    constructableClass: Symbol('Constructable related') } },


_exportFunctionality.instantiateInitialize.Reference,
_exportFunctionality.constructor.Reference,
_exportFunctionality.clientInterface.Reference);


const Prototype = Object.assign(Object.create(Object.prototype), _exportFunctionality.instantiateInitialize.Prototype, _exportFunctionality.constructor.Prototype, _exportFunctionality.clientInterface.Prototype);










Prototype[Reference.prototypeDelegation.functionality].setter.call(Prototype, {
  [Reference.key.constructableClass]: {
    prototype: Prototype,
    reference: Reference } });











Prototype[Reference.instantiate.functionality].setter.call(Prototype, {

  [Reference.key.createObjectWithDelegation]: _createObjectWithDelegation.createObjectWithDelegation });








Prototype[Reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.constructableClass]: function initializeConstuctable({ targetInstance, reference, prototype, description, construtorProperty = this } = {}) {
    if (!reference) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructableClass);
      reference = Object.create(prototypeDelegationSetting.reference || null);
    }
    if (!prototype) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructableClass);
      prototype = Object.create(prototypeDelegationSetting.prototype || null);
    }
    Object.setPrototypeOf(targetInstance, prototype);

    targetInstance[Reference.prototypeDelegation.functionality].setter.call(targetInstance, {
      [Reference.key.constructableClass]: {
        prototype: prototype,
        reference: reference } });


    let prototypeDelegationGetter = targetInstance[Reference.prototypeDelegation.functionality].getter.bind(targetInstance);
    (0, _mergeProperty.mergeNonexistentProperties)(targetInstance, {





      get reference() {
        return prototypeDelegationGetter(Reference.key.constructableClass).reference;
      },



      [Reference.class]: construtorProperty });

    Object.defineProperty(targetInstance, Reference.name, { writable: false, enumerable: false, value: description });

    if (!prototype.hasOwnProperty(Reference.metadata))
    Object.defineProperty(prototype, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(`${description} functionality`) } });
    return targetInstance;
  },

  [Reference.key.classInstance]({ targetInstance, construtorProperty = this, description = '' } = {}) {
    if (!targetInstance.hasOwnProperty(Reference.metadata))
    Object.defineProperty(targetInstance, Reference.metadata, {
      writable: false,
      enumerable: false,
      value: { type: Symbol(`${targetInstance[Reference.name]} class - ${description}`) } });

    targetInstance.constructor = construtorProperty;
    return targetInstance;
  },
  [Reference.key.configuredClass]({ targetInstance, parameter = [] } = {}) {
    targetInstance.parameter = parameter;
    return targetInstance;
  } });









Prototype[Reference.constructor.functionality].setter.call(Prototype, {



  [Reference.key.constructableClass]: (function () {let _ref = function* ({ description, reference, prototype, prototypeDelegation, self = this } = {}) {let _functionSent = yield;
      const shouldHandOverControl = _generatorExecutionControl.executionControl.shouldHandOver(_functionSent);
      prototypeDelegation || (prototypeDelegation = self[Reference.prototypeDelegation.functionality].getter.call(self, Reference.key.constructableClass).prototype);
      const step = [

      {
        passThroughArg: { description, prototypeDelegation: prototypeDelegation },
        func: function (previousArg, arg) {var _g, _context;
          let instance = (_g = (_context = self, self[Reference.instantiate.functionality].switch).call(_context, { implementationKey: Reference.key.createObjectWithDelegation }), _g.next('intermittent') && _g.next(arg).value);
          return { instance };
        },
        condition: true },

      {
        passThroughArg: { description, reference, prototype, construtorProperty: self },
        func: function ({ instance }, arg) {var _ref4, _context2, _g2;

          let argumentObject = Object.assign({ targetInstance: instance }, arg);
          _ref4 = (_context2 = self, self[Reference.initialize.functionality].switch).call(_context2, { implementationKey: Reference.key.constructableClass, recursiveDelegationChainExecution: true }), (
          g => {
            g.next('intermittent');
            let generator;
            do {
              generator = g.next(argumentObject);
            } while (!generator.done);

          })(_ref4);
          _g2 = (_context2 = self, self[Reference.initialize.functionality].switch).call(_context2, { implementationKey: Reference.key.classInstance }),
          _g2.next('intermittent') && _g2.next(lodash.pick(argumentObject, ['description', 'targetInstance', 'construtorProperty'])).value;
          return instance;
        },
        condition: true }];




      let i = 0,
      result;
      while (i < step.length) {
        if (step[i].condition == false) {
          i++;
          continue;
        }
        if (shouldHandOverControl) {
          _functionSent = yield step[i].passThroughArg;
          result = step[i].func(result, _functionSent);
        } else {
          result = step[i].func(result, step[i].passThroughArg);
        }
        i++;
      }
      return result;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),
  [Reference.key.classInstance]({ description = 'Class', callerClass = this } = {}) {var _g3, _g4;
    let instance = (_g3 =
    callerClass[Reference.instantiate.functionality].switch.call(callerClass, { implementationKey: Reference.key.createObjectWithDelegation }),
    _g3.next('intermittent') && _g3.next({ description, prototypeDelegation: callerClass }).value);
    _g4 = callerClass[Reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance }),
    _g4.next('intermittent') && _g4.next({ targetInstance: instance, description: description }).value;
    return instance;
  },

  [Reference.key.configuredClass]({ description = 'Configured Class.', parameter, callerClass = this } = {}) {var _g5, _g6;
    let instance = (_g5 =
    callerClass[Reference.constructor.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance }),
    _g5.next('intermittent') && _g5.next({ description: description }).value);
    _g6 = callerClass[Reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.configuredClass }),
    _g6.next('intermittent') && _g6.next({ targetInstance: instance, parameter }).value;
    return instance;
  } });












const Constructable = (_g7 =
Prototype[Reference.constructor.functionality].switch.call(Prototype, { implementationKey: Reference.key.constructableClass }),

_g7.next('intermittent') &&
_g7.next({ description: 'Constructable', reference: Reference, prototype: Prototype }).value);exports.Constructable = Constructable;








Prototype[Reference.clientInterface.functionality].setter.call(Prototype, {





  [Reference.key.constructableClass]({ self = this } = {}) {
    let constructorSwitch = Constructable[Reference.constructor.functionality].switch,
    clientInterfaceSwitch = Constructable[Reference.clientInterface.functionality].switch;
    let constructorImplementation = Reference.key.constructableClass,
    configuredConstructableImplementation = Reference.key.configuredClass,
    clientInterfaceImplementation = Reference.key.constructableClass;

    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g8;
        if (self.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: self.parameter });
        let instance = (_g8 = constructorSwitch.call(self, { implementationKey: constructorImplementation }), _g8.next('intermittent') && _g8.next(...argumentList).value);
        return {
          class: instance,
          reference: instance[Reference.reference],
          constructablePrototype: instance[Reference.prototypeDelegation.functionality].getter.call(instance, Reference.key.constructableClass).prototype };

      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g9, _g10;
        let newConfiguredConstructable = (_g9 =
        constructorSwitch.call(self, { implementationKey: configuredConstructableImplementation }), _g9.next('intermittent') && _g9.next({ description: description, parameter }).value);
        let clientInterface = (_g10 = clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }), _g10.next('intermittent') && _g10.next().value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });


Constructable.clientInterface = (_g11 =
Constructable[Reference.clientInterface.functionality].switch.call(Constructable, { implementationKey: Reference.key.constructableClass }), _g11.next('intermittent') && _g11.next().value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,