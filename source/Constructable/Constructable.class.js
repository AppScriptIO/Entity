"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Constructable = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _SymbolReference = require("../functionalityPrototype/Symbol.reference.js");
var _exportFunctionality = require("../functionalityPrototype/exportFunctionality.js");
var _createObjectWithDelegation = require("../utility/createObjectWithDelegation.js");
var _generatorExecutionControl = require("../utility/generatorExecutionControl.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var lodash = _interopRequireWildcard(require("lodash"));


const Reference = Object.assign(
Object.create(Object.prototype),
{
  name: Symbol('Own class name'),
  class: Symbol('class'),
  reference: 'reference',
  metadata: _SymbolReference.metadata,
  key: {
    createObjectWithDelegation: Symbol('createObjectWithDelegation'),
    classInstance: Symbol('class instance related'),
    configuredClass: Symbol('Configured class/constructable related'),
    constructableClass: Symbol('Constructable related') } },


_exportFunctionality.instantiateInitialize.Reference,
_exportFunctionality.constructor.Reference,
_exportFunctionality.clientInterface.Reference);


const Prototype = Object.assign(Object.create(Object.prototype), _exportFunctionality.instantiateInitialize.Prototype, _exportFunctionality.constructor.Prototype, _exportFunctionality.clientInterface.Prototype);










Prototype[Reference.prototypeDelegation.functionality].setter.call(Prototype, {
  [Reference.key.constructableClass]: {
    prototype: Prototype,
    reference: Reference } });











Prototype[Reference.instantiate.functionality].setter.call(Prototype, {

  [Reference.key.createObjectWithDelegation]: _createObjectWithDelegation.createObjectWithDelegation });








Prototype[Reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.constructableClass]: function initializeConstuctable({ targetInstance, reference, prototype, description, construtorProperty = this } = {}) {
    if (!reference) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructableClass);
      reference = Object.create(prototypeDelegationSetting.reference || null);
    }
    if (!prototype) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.constructableClass);
      prototype = Object.create(prototypeDelegationSetting.prototype || null);
    }
    Object.setPrototypeOf(targetInstance, prototype);

    targetInstance[Reference.prototypeDelegation.functionality].setter.call(targetInstance, {
      [Reference.key.constructableClass]: {
        prototype: prototype,
        reference: reference } });


    let prototypeDelegationGetter = targetInstance[Reference.prototypeDelegation.functionality].getter.bind(targetInstance);
    (0, _mergeProperty.mergeNonexistentProperties)(targetInstance, {





      get reference() {
        return prototypeDelegationGetter(Reference.key.constructableClass).reference;
      },



      [Reference.class]: construtorProperty });

    Object.defineProperty(targetInstance, Reference.name, { writable: false, enumerable: false, value: description });

    if (!prototype.hasOwnProperty(Reference.metadata))
    Object.defineProperty(prototype, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(`${description} functionality`) } });
    return targetInstance;
  },

  [Reference.key.classInstance]({ targetInstance, construtorProperty = this, description = '' } = {}) {
    if (!targetInstance.hasOwnProperty(Reference.metadata))
    Object.defineProperty(targetInstance, Reference.metadata, {
      writable: false,
      enumerable: false,
      value: { type: Symbol(`${description} - created by ${construtorProperty[Reference.name]} class`) } });

    targetInstance.constructor = construtorProperty;
    return targetInstance;
  },
  [Reference.key.configuredClass]({ targetInstance, parameter = [] } = {}) {
    targetInstance.parameter = parameter;
    return targetInstance;
  } });









Prototype[Reference.constructor.functionality].setter.call(Prototype, {



  [Reference.key.constructableClass]: (function () {let _ref = function* ({ description, reference, prototype, prototypeDelegation, callerClass = this } = {}) {let _functionSent = yield;
      const shouldHandOverControl = _generatorExecutionControl.executionControl.shouldHandOver(_functionSent);
      prototypeDelegation || (prototypeDelegation = callerClass[Reference.prototypeDelegation.functionality].getter.call(callerClass, Reference.key.constructableClass).prototype);
      const step = [

      {
        passThroughArg: { description, prototypeDelegation: prototypeDelegation },
        func: function (previousArg, arg) {var _context;
          let instance = (_context = callerClass, callerClass[Reference.instantiate.functionality].switch).call(_context, { implementationKey: Reference.key.createObjectWithDelegation })(arg);
          return { instance };
        },
        condition: true },

      {
        passThroughArg: { description, reference, prototype, construtorProperty: callerClass },
        func: function ({ instance }, arg) {var _context2;

          let argumentObject = Object.assign({ targetInstance: instance }, arg);
          (_context2 = callerClass, callerClass[Reference.initialize.functionality].switch).call(_context2, { implementationKey: Reference.key.constructableClass, recursiveDelegationChainExecution: true })(argumentObject);
          (_context2 = callerClass, callerClass[Reference.initialize.functionality].switch).call(_context2, { implementationKey: Reference.key.classInstance })(
          lodash.pick(argumentObject, ['description', 'targetInstance', 'construtorProperty']));

          return instance;
        },
        condition: true }];




      let i = 0,
      result;
      while (i < step.length) {
        if (step[i].condition == false) {
          i++;
          continue;
        }
        if (shouldHandOverControl) {
          _functionSent = yield step[i].passThroughArg;
          result = step[i].func(result, _functionSent);
        } else {
          result = step[i].func(result, step[i].passThroughArg);
        }
        i++;
      }
      return result;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),
  [Reference.key.classInstance]({ description = 'Class', callerClass = this } = {}) {
    let instance = callerClass[Reference.instantiate.functionality].switch.call(callerClass, { implementationKey: Reference.key.createObjectWithDelegation })({
      description,
      prototypeDelegation: callerClass });

    callerClass[Reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance })({ targetInstance: instance, description: description });
    return instance;
  },

  [Reference.key.configuredClass]({ description = 'Configured Class.', parameter, callerClass = this } = {}) {
    let instance = callerClass[Reference.constructor.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance })({ description: description });
    callerClass[Reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.configuredClass })({ targetInstance: instance, parameter });
    return instance;
  } });












const Constructable = Prototype[Reference.constructor.functionality].switch.call(Prototype, { implementationKey: Reference.key.constructableClass })({
  description: 'Constructable',
  reference: Reference,
  prototype: Prototype });exports.Constructable = Constructable;









let prototypeDelegationGetter = Constructable[Reference.prototypeDelegation.functionality].getter;
Prototype[Reference.clientInterface.functionality].setter.call(Prototype, {





  [Reference.key.constructableClass]({
    constructorImplementation,
    returnedInstanceAdapter = instance => ({
      class: instance,
      reference: instance[Reference.reference],
      constructablePrototype: prototypeDelegationGetter.call(instance, Reference.key.constructableClass).prototype }),

    callerClass = this } =
  {}) {
    let constructorSwitch = Constructable[Reference.constructor.functionality].switch,
    clientInterfaceSwitch = Constructable[Reference.clientInterface.functionality].switch,
    prototypeDelegationGetter = Constructable[Reference.prototypeDelegation.functionality].getter;
    let configuredConstructableImplementation = Reference.key.configuredClass,
    clientInterfaceImplementation = Reference.key.constructableClass;

    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {
        if (callerClass.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: callerClass.parameter });
        let instance = constructorSwitch.call(callerClass, { implementationKey: constructorImplementation })(...argumentList);
        return returnedInstanceAdapter ? returnedInstanceAdapter(instance) : instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {
        let newConfiguredConstructable = constructorSwitch.call(callerClass, { implementationKey: configuredConstructableImplementation })({ description: description, parameter });
        let clientInterface = clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation })();
        return clientInterface;
      } });

    return proxiedTarget;
  } });


Constructable.clientInterface = Constructable[Reference.clientInterface.functionality].switch.call(Constructable, { implementationKey: Reference.key.constructableClass })({
  constructorImplementation: Reference.key.constructableClass });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NvdXJjZS9Db25zdHJ1Y3RhYmxlL0NvbnN0cnVjdGFibGUuY2xhc3MuanMiXSwibmFtZXMiOlsiUmVmZXJlbmNlIiwiT2JqZWN0IiwiYXNzaWduIiwiY3JlYXRlIiwicHJvdG90eXBlIiwibmFtZSIsIlN5bWJvbCIsImNsYXNzIiwicmVmZXJlbmNlIiwibWV0YWRhdGEiLCJtZXRhZGF0YVN5bWJvbCIsImtleSIsImNyZWF0ZU9iamVjdFdpdGhEZWxlZ2F0aW9uIiwiY2xhc3NJbnN0YW5jZSIsImNvbmZpZ3VyZWRDbGFzcyIsImNvbnN0cnVjdGFibGVDbGFzcyIsImluc3RhbnRpYXRlSW5pdGlhbGl6ZSIsImNvbnN0cnVjdG9yIiwiY2xpZW50SW50ZXJmYWNlIiwiUHJvdG90eXBlIiwicHJvdG90eXBlRGVsZWdhdGlvbiIsImZ1bmN0aW9uYWxpdHkiLCJzZXR0ZXIiLCJpbnN0YW50aWF0ZSIsImluaXRpYWxpemUiLCJpbml0aWFsaXplQ29uc3R1Y3RhYmxlIiwidGFyZ2V0SW5zdGFuY2UiLCJkZXNjcmlwdGlvbiIsImNvbnN0cnV0b3JQcm9wZXJ0eSIsInByb3RvdHlwZURlbGVnYXRpb25TZXR0aW5nIiwiZ2V0dGVyIiwic2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGVEZWxlZ2F0aW9uR2V0dGVyIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJ2YWx1ZSIsImhhc093blByb3BlcnR5IiwidHlwZSIsInBhcmFtZXRlciIsImNhbGxlckNsYXNzIiwic2hvdWxkSGFuZE92ZXJDb250cm9sIiwiZXhlY3V0aW9uQ29udHJvbCIsInNob3VsZEhhbmRPdmVyIiwic3RlcCIsInBhc3NUaHJvdWdoQXJnIiwiZnVuYyIsInByZXZpb3VzQXJnIiwiYXJnIiwiaW5zdGFuY2UiLCJzd2l0Y2giLCJpbXBsZW1lbnRhdGlvbktleSIsImNvbmRpdGlvbiIsImFyZ3VtZW50T2JqZWN0IiwicmVjdXJzaXZlRGVsZWdhdGlvbkNoYWluRXhlY3V0aW9uIiwibG9kYXNoIiwicGljayIsImkiLCJyZXN1bHQiLCJsZW5ndGgiLCJDb25zdHJ1Y3RhYmxlIiwiY29uc3RydWN0b3JJbXBsZW1lbnRhdGlvbiIsInJldHVybmVkSW5zdGFuY2VBZGFwdGVyIiwiY29uc3RydWN0YWJsZVByb3RvdHlwZSIsImNvbnN0cnVjdG9yU3dpdGNoIiwiY2xpZW50SW50ZXJmYWNlU3dpdGNoIiwiY29uZmlndXJlZENvbnN0cnVjdGFibGVJbXBsZW1lbnRhdGlvbiIsImNsaWVudEludGVyZmFjZUltcGxlbWVudGF0aW9uIiwicHJveGllZFRhcmdldCIsIlByb3h5IiwiY29uc3RydWN0IiwidGFyZ2V0IiwiYXJndW1lbnRMaXN0IiwibGlzdFRhcmdldCIsImxpc3REZWZhdWx0IiwiYXBwbHkiLCJ0aGlzQXJnIiwibmV3Q29uZmlndXJlZENvbnN0cnVjdGFibGUiXSwibWFwcGluZ3MiOiJzWUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE1BQU1BLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQO0FBQ2hCRCxNQUFNLENBQUNFLE1BQVAsQ0FBY0YsTUFBTSxDQUFDRyxTQUFyQixDQURnQjtBQUVoQjtBQUNFQyxFQUFBQSxJQUFJLEVBQUVDLE1BQU0sQ0FBQyxnQkFBRCxDQURkO0FBRUVDLEVBQUFBLEtBQUssRUFBRUQsTUFBTSxDQUFDLE9BQUQsQ0FGZjtBQUdFRSxFQUFBQSxTQUFTLEVBQUUsV0FIYjtBQUlFQyxFQUFBQSxRQUFRLEVBQUVDLHlCQUpaO0FBS0VDLEVBQUFBLEdBQUcsRUFBRTtBQUNIQyxJQUFBQSwwQkFBMEIsRUFBRU4sTUFBTSxDQUFDLDRCQUFELENBRC9CO0FBRUhPLElBQUFBLGFBQWEsRUFBRVAsTUFBTSxDQUFDLHdCQUFELENBRmxCO0FBR0hRLElBQUFBLGVBQWUsRUFBRVIsTUFBTSxDQUFDLHdDQUFELENBSHBCO0FBSUhTLElBQUFBLGtCQUFrQixFQUFFVCxNQUFNLENBQUMsdUJBQUQsQ0FKdkIsRUFMUCxFQUZnQjs7O0FB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QixXQUFXLEVBQW9CLEVBQUVXLGlCQUFpQixFQUFFZSxxQ0FBckIsRUFBcEIsQ0FBWCxDQUE2RixFQUFFdkMsV0FBVyxFQUFFQSxXQUFmLEVBQTRCWSxTQUE1QixFQUE3RixDQUFqQztBQUNBLFlBQUlyQixlQUFlLEdBQStCK0MscUJBQTVCLE1BQUFZLDBCQUEwQixFQUF3QixFQUFFMUIsaUJBQWlCLEVBQUVnQiw2QkFBckIsRUFBeEIsQ0FBMUIsRUFBdEI7QUFDQSxlQUFPakQsZUFBUDtBQUNELE9BVjRDLEVBQXpCLENBQXRCOztBQVlBLFdBQU9rRCxhQUFQO0FBQ0QsR0FsQ2tFLEVBQTVELENBQVQ7OztBQXFDQVIsYUFBYSxDQUFDMUMsZUFBZCxHQUErQzBDLGFBQWEsQ0FBQzVELFNBQVMsQ0FBQ2tCLGVBQVYsQ0FBMEJHLGFBQTNCLENBQWIsQ0FBdUQ2QixNQUF0RSxNQUFBVSxhQUFhLEVBQWdFLEVBQUVULGlCQUFpQixFQUFFbkQsU0FBUyxDQUFDVyxHQUFWLENBQWNJLGtCQUFuQyxFQUFoRSxDQUFiLENBQXNJO0FBQ3BLOEMsRUFBQUEseUJBQXlCLEVBQUU3RCxTQUFTLENBQUNXLEdBQVYsQ0FBY0ksa0JBRDJILEVBQXRJLENBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWV0YWRhdGEgYXMgbWV0YWRhdGFTeW1ib2wgfSBmcm9tICcuLi9mdW5jdGlvbmFsaXR5UHJvdG90eXBlL1N5bWJvbC5yZWZlcmVuY2UuanMnXG5pbXBvcnQgeyBpbnN0YW50aWF0ZUluaXRpYWxpemUsIGNvbnN0cnVjdG9yLCBjbGllbnRJbnRlcmZhY2UgfSBmcm9tICcuLi9mdW5jdGlvbmFsaXR5UHJvdG90eXBlL2V4cG9ydEZ1bmN0aW9uYWxpdHkuanMnXG5pbXBvcnQgeyBjcmVhdGVPYmplY3RXaXRoRGVsZWdhdGlvbiB9IGZyb20gJy4uL3V0aWxpdHkvY3JlYXRlT2JqZWN0V2l0aERlbGVnYXRpb24uanMnXG5pbXBvcnQgeyBleGVjdXRpb25Db250cm9sIH0gZnJvbSAnLi4vdXRpbGl0eS9nZW5lcmF0b3JFeGVjdXRpb25Db250cm9sLmpzJ1xuaW1wb3J0IHsgbWVyZ2VOb25leGlzdGVudFByb3BlcnRpZXMsIG1lcmdlQXJyYXlXaXRoT2JqZWN0SXRlbSB9IGZyb20gJy4uL3V0aWxpdHkvbWVyZ2VQcm9wZXJ0eS5qcydcbmltcG9ydCAqIGFzIGxvZGFzaCBmcm9tICdsb2Rhc2gnXG5cbi8vIGNvbnN0cnVjdGFibGUgc3ltYm9sc1xuY29uc3QgUmVmZXJlbmNlID0gT2JqZWN0LmFzc2lnbihcbiAgT2JqZWN0LmNyZWF0ZShPYmplY3QucHJvdG90eXBlKSxcbiAge1xuICAgIG5hbWU6IFN5bWJvbCgnT3duIGNsYXNzIG5hbWUnKSwgLy8gb3duIGNsYXNzIG5hbWVcbiAgICBjbGFzczogU3ltYm9sKCdjbGFzcycpLCAvLyB0aGUgY29uc3RydWN0YWJsZSB1c2VkIHRvIGNyZWF0ZSB0aGUgaW5zdGFuY2UgKHRvIHdoaWNoIGNsYXNzIGRvZXMgaXQgYmVsb25nKS5cbiAgICByZWZlcmVuY2U6ICdyZWZlcmVuY2UnLCAvLyByZWZlcmVuY2Uga2V5IHRvIGJlIHNldCBvbiB0aGUgY2xhc3MgZm9yIHNob3J0IGFjY2VzcyB0byBgcHJvdG90eXBlRGVsZWdhdGlvbi5yZWZlcmVuY2VgLlxuICAgIG1ldGFkYXRhOiBtZXRhZGF0YVN5bWJvbCxcbiAgICBrZXk6IHtcbiAgICAgIGNyZWF0ZU9iamVjdFdpdGhEZWxlZ2F0aW9uOiBTeW1ib2woJ2NyZWF0ZU9iamVjdFdpdGhEZWxlZ2F0aW9uJyksXG4gICAgICBjbGFzc0luc3RhbmNlOiBTeW1ib2woJ2NsYXNzIGluc3RhbmNlIHJlbGF0ZWQnKSwgLy8gc2V0IGNvbnN0cnVjdG9yLlxuICAgICAgY29uZmlndXJlZENsYXNzOiBTeW1ib2woJ0NvbmZpZ3VyZWQgY2xhc3MvY29uc3RydWN0YWJsZSByZWxhdGVkJyksIC8vIGFuIGluc3RhbmNlIHRoYXQgZGVsZWdhdGVzIHRvIHN0YXRpYyBjbGFzcyBhbmQgaG9sZHMgZGVmYXVsdCBwYXJhbWVydHMgdG8gYmUgdXNlZCBvbiBjYWxsLlxuICAgICAgY29uc3RydWN0YWJsZUNsYXNzOiBTeW1ib2woJ0NvbnN0cnVjdGFibGUgcmVsYXRlZCcpLFxuICAgIH0sXG4gIH0sXG4gIGluc3RhbnRpYXRlSW5pdGlhbGl6ZS5SZWZlcmVuY2UsXG4gIGNvbnN0cnVjdG9yLlJlZmVyZW5jZSxcbiAgY2xpZW50SW50ZXJmYWNlLlJlZmVyZW5jZSxcbilcbi8vIGNvbnN0cnVjdGFibGUgZnVuY3Rpb25hbGl0eVxuY29uc3QgUHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKE9iamVjdC5wcm90b3R5cGUpLCBpbnN0YW50aWF0ZUluaXRpYWxpemUuUHJvdG90eXBlLCBjb25zdHJ1Y3Rvci5Qcm90b3R5cGUsIGNsaWVudEludGVyZmFjZS5Qcm90b3R5cGUpXG5cbi8qXG4gICAgICAgICAgICAgICAgICAgXyAgICAgICAgXyAgICAgICAgICAgICAgICAgICAgX19fXyAgICAgICBfICAgICAgICAgICAgICAgICAgXyAgIF8gICAgICAgICAgICAgXG4gICBfIF9fICBfIF9fIF9fXyB8IHxfIF9fXyB8IHxfIF8gICBfIF8gX18gICBfX198ICBfIFxcICBfX198IHwgX19fICBfXyBfICBfXyBffCB8XyhfKSBfX18gIF8gX18gIFxuICB8ICdfIFxcfCAnX18vIF8gXFx8IF9fLyBfIFxcfCBfX3wgfCB8IHwgJ18gXFwgLyBfIFxcIHwgfCB8LyBfIFxcIHwvIF8gXFwvIF9gIHwvIF9gIHwgX198IHwvIF8gXFx8ICdfIFxcIFxuICB8IHxfKSB8IHwgfCAoXykgfCB8fCAoXykgfCB8X3wgfF98IHwgfF8pIHwgIF9fLyB8X3wgfCAgX18vIHwgIF9fLyAoX3wgfCAoX3wgfCB8X3wgfCAoXykgfCB8IHwgfFxuICB8IC5fXy98X3wgIFxcX19fLyBcXF9fXFxfX18vIFxcX198XFxfXywgfCAuX18vIFxcX19ffF9fX18vIFxcX19ffF98XFxfX198XFxfXywgfFxcX18sX3xcXF9ffF98XFxfX18vfF98IHxffFxuICB8X3wgICAgICAgICAgICAgICAgICAgICAgICAgICB8X19fL3xffCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfX18vICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBob2xkIHByb3BlcnRpZXMgcmVxdWlyZWQgaW4gcHJvdG90eXBlIGRlbGVnYXRpb25cbiovXG5Qcm90b3R5cGU6OlByb3RvdHlwZVtSZWZlcmVuY2UucHJvdG90eXBlRGVsZWdhdGlvbi5mdW5jdGlvbmFsaXR5XS5zZXR0ZXIoe1xuICBbUmVmZXJlbmNlLmtleS5jb25zdHJ1Y3RhYmxlQ2xhc3NdOiB7XG4gICAgcHJvdG90eXBlOiBQcm90b3R5cGUsXG4gICAgcmVmZXJlbmNlOiBSZWZlcmVuY2UsXG4gIH0sXG59KVxuXG4vKlxuIFxuICAgX19fICAgICAgICAgICBfICAgICAgICAgICAgICBfICAgXyAgICAgICBfICAgICAgIFxuICB8XyBffF8gX18gIF9fX3wgfF8gX18gXyBfIF9fIHwgfF8oXykgX18gX3wgfF8gX19fIFxuICAgfCB8fCAnXyBcXC8gX198IF9fLyBfYCB8ICdfIFxcfCBfX3wgfC8gX2AgfCBfXy8gXyBcXFxuICAgfCB8fCB8IHwgXFxfXyBcXCB8fCAoX3wgfCB8IHwgfCB8X3wgfCAoX3wgfCB8fCAgX18vXG4gIHxfX198X3wgfF98X19fL1xcX19cXF9fLF98X3wgfF98XFxfX3xffFxcX18sX3xcXF9fXFxfX198XG4qL1xuUHJvdG90eXBlOjpQcm90b3R5cGVbUmVmZXJlbmNlLmluc3RhbnRpYXRlLmZ1bmN0aW9uYWxpdHldLnNldHRlcih7XG4gIC8vIGdlbmVyYWwgaW1wbGVtZW50YXRpb24gd2hpY2ggY3JlYXRlcyBhbiBvYmplY3QgZGVsZWdhdGluZyB0byBwYXNzZWQgcGFyYW0uXG4gIFtSZWZlcmVuY2Uua2V5LmNyZWF0ZU9iamVjdFdpdGhEZWxlZ2F0aW9uXTogY3JlYXRlT2JqZWN0V2l0aERlbGVnYXRpb24sXG59KVxuLypcbiAgIF9fXyAgICAgICBfIF8gICBfICAgICAgIF8gXyAgICAgICAgIFxuICB8XyBffF8gX18gKF8pIHxfKF8pIF9fIF98IChfKV9fX19fX18gXG4gICB8IHx8ICdfIFxcfCB8IF9ffCB8LyBfYCB8IHwgfF8gIC8gXyBcXFxuICAgfCB8fCB8IHwgfCB8IHxffCB8IChffCB8IHwgfC8gLyAgX18vXG4gIHxfX198X3wgfF98X3xcXF9ffF98XFxfXyxffF98Xy9fX19cXF9fX3xcbiovXG5Qcm90b3R5cGU6OlByb3RvdHlwZVtSZWZlcmVuY2UuaW5pdGlhbGl6ZS5mdW5jdGlvbmFsaXR5XS5zZXR0ZXIoe1xuICAvLyBzZXQgdGhlIHByb3BlcnRpZXMgbmVjZXNzYXJ5IGZvciBDb25zdHJ1Y3RhYmxlIHBhdHRlcm4gdXNhZ2UuICAgICAgIC8vIEluaXRpYWxpemUgQ29uc3RydWN0YWJsZSBwYXR0ZXJuIHByb3BlcnRpZXMuXG4gIFtSZWZlcmVuY2Uua2V5LmNvbnN0cnVjdGFibGVDbGFzc106IGZ1bmN0aW9uIGluaXRpYWxpemVDb25zdHVjdGFibGUoeyB0YXJnZXRJbnN0YW5jZSwgcmVmZXJlbmNlLCBwcm90b3R5cGUsIGRlc2NyaXB0aW9uLCBjb25zdHJ1dG9yUHJvcGVydHkgPSB0aGlzIH0gPSB7fSkge1xuICAgIGlmICghcmVmZXJlbmNlKSB7XG4gICAgICBsZXQgcHJvdG90eXBlRGVsZWdhdGlvblNldHRpbmcgPSBjb25zdHJ1dG9yUHJvcGVydHk6OmNvbnN0cnV0b3JQcm9wZXJ0eVtSZWZlcmVuY2UucHJvdG90eXBlRGVsZWdhdGlvbi5mdW5jdGlvbmFsaXR5XS5nZXR0ZXIoUmVmZXJlbmNlLmtleS5jb25zdHJ1Y3RhYmxlQ2xhc3MpXG4gICAgICByZWZlcmVuY2UgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZURlbGVnYXRpb25TZXR0aW5nLnJlZmVyZW5jZSB8fCBudWxsKVxuICAgIH1cbiAgICBpZiAoIXByb3RvdHlwZSkge1xuICAgICAgbGV0IHByb3RvdHlwZURlbGVnYXRpb25TZXR0aW5nID0gY29uc3RydXRvclByb3BlcnR5Ojpjb25zdHJ1dG9yUHJvcGVydHlbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV0uZ2V0dGVyKFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzKVxuICAgICAgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGVEZWxlZ2F0aW9uU2V0dGluZy5wcm90b3R5cGUgfHwgbnVsbCkgLy8gRW50aXRpZXMgcHJvdG90eXBlcyBkZWxlZ2F0ZSB0byBlYWNoIG90aGVyLlxuICAgIH1cbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0SW5zdGFuY2UsIHByb3RvdHlwZSkgLy8gaW5oZXJpdCBvd24gYW5kIGRlbGVnYXRlZCBmdW5jdGlvbmFsaXRpZXMuXG4gICAgLy8gc2V0IGNvbnN0cnVjdGFibGUgcHJvdG90eXBlRGVsZWdhdGlvbiBwcm9wZXJ0aWVzIC0gdmFsdWVzIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBpbnN0YW5jZSBjcmVhdGlvblxuICAgIHRhcmdldEluc3RhbmNlOjp0YXJnZXRJbnN0YW5jZVtSZWZlcmVuY2UucHJvdG90eXBlRGVsZWdhdGlvbi5mdW5jdGlvbmFsaXR5XS5zZXR0ZXIoe1xuICAgICAgW1JlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzXToge1xuICAgICAgICBwcm90b3R5cGU6IHByb3RvdHlwZSxcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICB9LFxuICAgIH0pXG4gICAgbGV0IHByb3RvdHlwZURlbGVnYXRpb25HZXR0ZXIgPSB0YXJnZXRJbnN0YW5jZTo6dGFyZ2V0SW5zdGFuY2VbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV0uZ2V0dGVyXG4gICAgbWVyZ2VOb25leGlzdGVudFByb3BlcnRpZXModGFyZ2V0SW5zdGFuY2UsIHtcbiAgICAgIC8vIGluIHVzYWdlIHRocm91Z2ggYGluc3RhbmNlb2ZgIEpTIGFwaS5cbiAgICAgIC8vIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xuICAgICAgLy8gICByZXR1cm4gdGFyZ2V0SW5zdGFuY2VbUmVmZXJlbmNlLmNsYXNzXSAvLyEgRG9lc24ndCB3b3JrIGFzIGl0IG11c3QgcmV0dXJuIGEgY29uc3RydWN0b3IuXG4gICAgICAvLyB9LFxuICAgICAgLy8gTm90ZTogZXhwb3NlIGBwcm90b3R5cGVgICYgYHJlZmVyZW5jZWAgb24gdGhlIGluc3RhbmNlIGRpcmVjdGx5IGZvciBlYXNpZXIgYWNjZXNzLiAodGhpcyBzaG91bGRuJ3QgYmUgcmVsaWVkIHVwb24gd2hlbiBjb25zdHJ1Y3RpbmcgYSBzdWIgaW5zdGFuY2UgLyBjb25zdHJ1Y3RhYmxlIGluc3RhbmNlKVxuICAgICAgZ2V0IHJlZmVyZW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvdHlwZURlbGVnYXRpb25HZXR0ZXIoUmVmZXJlbmNlLmtleS5jb25zdHJ1Y3RhYmxlQ2xhc3MpLnJlZmVyZW5jZVxuICAgICAgfSxcbiAgICAgIC8vIGdldCBbUmVmZXJlbmNlLnByb3RvdHlwZV0oKSB7XG4gICAgICAvLyAgIHJldHVybiB0YXJnZXRJbnN0YW5jZTo6dGFyZ2V0SW5zdGFuY2VbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV0uZ2V0dGVyKFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzKS5wcm90b3R5cGVcbiAgICAgIC8vIH0sXG4gICAgICBbUmVmZXJlbmNlLmNsYXNzXTogY29uc3RydXRvclByb3BlcnR5LCAvLyB0aGUgY2xhc3MgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIGluc3RhbmNlLlxuICAgIH0pXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldEluc3RhbmNlLCBSZWZlcmVuY2UubmFtZSwgeyB3cml0YWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogZGVzY3JpcHRpb24gfSkgLy8gc2V0IG1ldGFkYXRhIGluZm9ybWF0aW9uIGZvciBkZWJ1Z2dpbmcuXG4gICAgLy8gYWRkIGRlYnVnZ2luZyBpbmZvcm1hdGlvbi5cbiAgICBpZiAoIXByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShSZWZlcmVuY2UubWV0YWRhdGEpKVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgUmVmZXJlbmNlLm1ldGFkYXRhLCB7IHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIHZhbHVlOiB7IHR5cGU6IFN5bWJvbChgJHtkZXNjcmlwdGlvbn0gZnVuY3Rpb25hbGl0eWApIH0gfSlcbiAgICByZXR1cm4gdGFyZ2V0SW5zdGFuY2VcbiAgfSxcbiAgLy8gaW5pdGlhbGl6ZSBhIHByb3RvdHlwZSB0aGF0IGJlbG9uZ3MgdGhhdCBpcyBhIGNsYXNzLlxuICBbUmVmZXJlbmNlLmtleS5jbGFzc0luc3RhbmNlXSh7IHRhcmdldEluc3RhbmNlLCBjb25zdHJ1dG9yUHJvcGVydHkgPSB0aGlzLCBkZXNjcmlwdGlvbiA9ICcnIH0gPSB7fSkge1xuICAgIGlmICghdGFyZ2V0SW5zdGFuY2UuaGFzT3duUHJvcGVydHkoUmVmZXJlbmNlLm1ldGFkYXRhKSlcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXRJbnN0YW5jZSwgUmVmZXJlbmNlLm1ldGFkYXRhLCB7XG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB7IHR5cGU6IFN5bWJvbChgJHtkZXNjcmlwdGlvbn0gLSBjcmVhdGVkIGJ5ICR7Y29uc3RydXRvclByb3BlcnR5W1JlZmVyZW5jZS5uYW1lXX0gY2xhc3NgKSB9LFxuICAgICAgfSkgLy8gc2V0IG1ldGFkYXRhIGluZm9ybWF0aW9uIGZvciBkZWJ1Z2dpbmcuXG4gICAgdGFyZ2V0SW5zdGFuY2UuY29uc3RydWN0b3IgPSBjb25zdHJ1dG9yUHJvcGVydHkgLy8gdG8gcHJlc2VydmUgZnVuY3Rpb25hbGl0eSBvZiBuYXRpdmUgSlMgZnVuY3Rpb25zIGludGVncmF0aW9uLlxuICAgIHJldHVybiB0YXJnZXRJbnN0YW5jZVxuICB9LFxuICBbUmVmZXJlbmNlLmtleS5jb25maWd1cmVkQ2xhc3NdKHsgdGFyZ2V0SW5zdGFuY2UsIHBhcmFtZXRlciA9IFtdIH0gPSB7fSkge1xuICAgIHRhcmdldEluc3RhbmNlLnBhcmFtZXRlciA9IHBhcmFtZXRlclxuICAgIHJldHVybiB0YXJnZXRJbnN0YW5jZVxuICB9LFxufSlcblxuLypcbiAgICBfX19fICAgICAgICAgICAgICAgIF8gICAgICAgICAgICAgICAgICAgXyAgICAgICAgICAgICBcbiAgIC8gX19ffF9fXyAgXyBfXyAgX19ffCB8XyBfIF9fIF8gICBfICBfX198IHxfIF9fXyAgXyBfXyBcbiAgfCB8ICAgLyBfIFxcfCAnXyBcXC8gX198IF9ffCAnX198IHwgfCB8LyBfX3wgX18vIF8gXFx8ICdfX3xcbiAgfCB8X198IChfKSB8IHwgfCBcXF9fIFxcIHxffCB8ICB8IHxffCB8IChfX3wgfHwgKF8pIHwgfCAgIFxuICAgXFxfX19fXFxfX18vfF98IHxffF9fXy9cXF9ffF98ICAgXFxfXyxffFxcX19ffFxcX19cXF9fXy98X3wgICBcbiovXG5Qcm90b3R5cGU6OlByb3RvdHlwZVtSZWZlcmVuY2UuY29uc3RydWN0b3IuZnVuY3Rpb25hbGl0eV0uc2V0dGVyKHtcbiAgLy8gZ2VuZXJhdG9yIGZ1bmN0aW9uIHRoYXQgdXNlcyBhIHBhdHRlcm4gYWxsb3dpbmcgZm9yIGhhbmRpbmcgb3ZlciBjb250cm9sIHRvIGNhbGxlciAtIGkuZS4gcnVubmluZyB0aGUgZnVuY3Rpb24gaW4gc3RlcHMuXG4gIC8vIENvbnN0cnVjdGFibGUgcGF0dGVybiBpbnN0YW5jZSAtIGZvbGxvd3MgdGhlIENvbnN0cnVjdGFibGUgc3BlY2lmaWNhdGlvbiAodGhpcyBtb2R1bGUpLlxuICAvLyBUT0RPOiBEb2N1bWVudCBwYXR0ZXJuIHVzZWQgZm9yIGhhbmRpbmcgb3ZlciBjb250cm9sIHRvIGNsaWVudCBhbmQgcGlwcGluZyByZXN1bHRzIHRocm91Z2ggdGhlIGNoYWluXG4gIFtSZWZlcmVuY2Uua2V5LmNvbnN0cnVjdGFibGVDbGFzc106IGZ1bmN0aW9uKih7IGRlc2NyaXB0aW9uLCByZWZlcmVuY2UsIHByb3RvdHlwZSwgcHJvdG90eXBlRGVsZWdhdGlvbiwgY2FsbGVyQ2xhc3MgPSB0aGlzIH0gPSB7fSkge1xuICAgIGNvbnN0IHNob3VsZEhhbmRPdmVyQ29udHJvbCA9IGV4ZWN1dGlvbkNvbnRyb2wuc2hvdWxkSGFuZE92ZXIoZnVuY3Rpb24uc2VudClcbiAgICBwcm90b3R5cGVEZWxlZ2F0aW9uIHx8PSBjYWxsZXJDbGFzczo6Y2FsbGVyQ2xhc3NbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV0uZ2V0dGVyKFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzKS5wcm90b3R5cGVcbiAgICBjb25zdCBzdGVwID0gW1xuICAgICAgLy8gZXhlY3V0aW9uIG9mIHN0ZXBzIGFsbG93cyBmb3IgcGFzc2luZyBhcmd1bWVudCBmb3IgZWFjaCBzdGVwIGFuZCBwaXBwaW5nIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAuXG4gICAgICB7XG4gICAgICAgIHBhc3NUaHJvdWdoQXJnOiB7IGRlc2NyaXB0aW9uLCBwcm90b3R5cGVEZWxlZ2F0aW9uOiBwcm90b3R5cGVEZWxlZ2F0aW9uIH0sXG4gICAgICAgIGZ1bmM6IGZ1bmN0aW9uKHByZXZpb3VzQXJnLCBhcmcpIHtcbiAgICAgICAgICBsZXQgaW5zdGFuY2UgPSBjYWxsZXJDbGFzczo6Y2FsbGVyQ2xhc3NbUmVmZXJlbmNlLmluc3RhbnRpYXRlLmZ1bmN0aW9uYWxpdHldLnN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBSZWZlcmVuY2Uua2V5LmNyZWF0ZU9iamVjdFdpdGhEZWxlZ2F0aW9uIH0pKGFyZylcbiAgICAgICAgICByZXR1cm4geyBpbnN0YW5jZSB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmRpdGlvbjogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhc3NUaHJvdWdoQXJnOiB7IGRlc2NyaXB0aW9uLCByZWZlcmVuY2UsIHByb3RvdHlwZSwgY29uc3RydXRvclByb3BlcnR5OiBjYWxsZXJDbGFzcyB9LFxuICAgICAgICBmdW5jOiBmdW5jdGlvbih7IGluc3RhbmNlIH0sIGFyZykge1xuICAgICAgICAgIC8vIHBhc3MgdG8gYWxsIGltcGxlbWVuYXRhdGlvbnMgdGhlIHNhbWUgYXJndW1lbnRcbiAgICAgICAgICBsZXQgYXJndW1lbnRPYmplY3QgPSBPYmplY3QuYXNzaWduKHsgdGFyZ2V0SW5zdGFuY2U6IGluc3RhbmNlIH0sIGFyZylcbiAgICAgICAgICBjYWxsZXJDbGFzczo6Y2FsbGVyQ2xhc3NbUmVmZXJlbmNlLmluaXRpYWxpemUuZnVuY3Rpb25hbGl0eV0uc3dpdGNoKHsgaW1wbGVtZW50YXRpb25LZXk6IFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzLCByZWN1cnNpdmVEZWxlZ2F0aW9uQ2hhaW5FeGVjdXRpb246IHRydWUgfSkoYXJndW1lbnRPYmplY3QpXG4gICAgICAgICAgY2FsbGVyQ2xhc3M6OmNhbGxlckNsYXNzW1JlZmVyZW5jZS5pbml0aWFsaXplLmZ1bmN0aW9uYWxpdHldLnN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBSZWZlcmVuY2Uua2V5LmNsYXNzSW5zdGFuY2UgfSkoXG4gICAgICAgICAgICBsb2Rhc2gucGljayhhcmd1bWVudE9iamVjdCwgWydkZXNjcmlwdGlvbicsICd0YXJnZXRJbnN0YW5jZScsICdjb25zdHJ1dG9yUHJvcGVydHknXSksXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZVxuICAgICAgICB9LFxuICAgICAgICBjb25kaXRpb246IHRydWUsXG4gICAgICB9LFxuICAgIF1cblxuICAgIC8vIFJ1biBjaGFpbiBvZiBzdGVwIGZ1bmN0aW9uc1xuICAgIGxldCBpID0gMCxcbiAgICAgIHJlc3VsdFxuICAgIHdoaWxlIChpIDwgc3RlcC5sZW5ndGgpIHtcbiAgICAgIGlmIChzdGVwW2ldLmNvbmRpdGlvbiA9PSBmYWxzZSkge1xuICAgICAgICBpKytcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRIYW5kT3ZlckNvbnRyb2wpIHtcbiAgICAgICAgeWllbGQgc3RlcFtpXS5wYXNzVGhyb3VnaEFyZ1xuICAgICAgICByZXN1bHQgPSBzdGVwW2ldLmZ1bmMocmVzdWx0LCBmdW5jdGlvbi5zZW50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gc3RlcFtpXS5mdW5jKHJlc3VsdCwgc3RlcFtpXS5wYXNzVGhyb3VnaEFyZylcbiAgICAgIH1cbiAgICAgIGkrK1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH0sXG4gIFtSZWZlcmVuY2Uua2V5LmNsYXNzSW5zdGFuY2VdKHsgZGVzY3JpcHRpb24gPSAnQ2xhc3MnLCBjYWxsZXJDbGFzcyA9IHRoaXMgfSA9IHt9KSB7XG4gICAgbGV0IGluc3RhbmNlID0gY2FsbGVyQ2xhc3M6OmNhbGxlckNsYXNzW1JlZmVyZW5jZS5pbnN0YW50aWF0ZS5mdW5jdGlvbmFsaXR5XS5zd2l0Y2goeyBpbXBsZW1lbnRhdGlvbktleTogUmVmZXJlbmNlLmtleS5jcmVhdGVPYmplY3RXaXRoRGVsZWdhdGlvbiB9KSh7XG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIHByb3RvdHlwZURlbGVnYXRpb246IGNhbGxlckNsYXNzLFxuICAgIH0pXG4gICAgY2FsbGVyQ2xhc3M6OmNhbGxlckNsYXNzW1JlZmVyZW5jZS5pbml0aWFsaXplLmZ1bmN0aW9uYWxpdHldLnN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBSZWZlcmVuY2Uua2V5LmNsYXNzSW5zdGFuY2UgfSkoeyB0YXJnZXRJbnN0YW5jZTogaW5zdGFuY2UsIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB9KVxuICAgIHJldHVybiBpbnN0YW5jZVxuICB9LFxuICAvLyBjcmVhdGUgaW5zdGFuY2Ugb2YgYSBDb25zdHJ1Y3RhYmxlIHRoYXQgaXMgcHJlcG9wdWxhdGVkIHdpdGggcGFyYW1ldGVycywgY2FsbGluZyB0aGUgZnVuY3Rpb25zIHdpbGwgdXNlIHRoZXNlIHBhcmFtcy4gVGhpcyBhbGxvd3MgdXNhZ2Ugb2YgcGFyYW1zIG11bHRpcGxlIHRpbWVzIHdpdGhvdXQgcmVwZWF0aW5nIHRoZW0gaW4gZWFjaCByZXF1cmVzdC5cbiAgW1JlZmVyZW5jZS5rZXkuY29uZmlndXJlZENsYXNzXSh7IGRlc2NyaXB0aW9uID0gJ0NvbmZpZ3VyZWQgQ2xhc3MuJywgcGFyYW1ldGVyLCBjYWxsZXJDbGFzcyA9IHRoaXMgfSA9IHt9KSB7XG4gICAgbGV0IGluc3RhbmNlID0gY2FsbGVyQ2xhc3M6OmNhbGxlckNsYXNzW1JlZmVyZW5jZS5jb25zdHJ1Y3Rvci5mdW5jdGlvbmFsaXR5XS5zd2l0Y2goeyBpbXBsZW1lbnRhdGlvbktleTogUmVmZXJlbmNlLmtleS5jbGFzc0luc3RhbmNlIH0pKHsgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uIH0pXG4gICAgY2FsbGVyQ2xhc3M6OmNhbGxlckNsYXNzW1JlZmVyZW5jZS5pbml0aWFsaXplLmZ1bmN0aW9uYWxpdHldLnN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBSZWZlcmVuY2Uua2V5LmNvbmZpZ3VyZWRDbGFzcyB9KSh7IHRhcmdldEluc3RhbmNlOiBpbnN0YW5jZSwgcGFyYW1ldGVyIH0pXG4gICAgcmV0dXJuIGluc3RhbmNlXG4gIH0sXG59KVxuXG4vKlxuICogICBfX19fICAgICAgICAgICAgICAgIF8gICAgICAgICAgICAgICAgICAgXyAgICAgICAgXyAgICAgXyAgICAgICAgIF9fX18gXyAgICAgICAgICAgICAgICBcbiAqICAvIF9fX3xfX18gIF8gX18gIF9fX3wgfF8gXyBfXyBfICAgXyAgX19ffCB8XyBfXyBffCB8X18gfCB8IF9fXyAgIC8gX19ffCB8IF9fIF8gX19fIF9fXyAgXG4gKiB8IHwgICAvIF8gXFx8ICdfIFxcLyBfX3wgX198ICdfX3wgfCB8IHwvIF9ffCBfXy8gX2AgfCAnXyBcXHwgfC8gXyBcXCB8IHwgICB8IHwvIF9gIC8gX18vIF9ffCBcbiAqIHwgfF9ffCAoXykgfCB8IHwgXFxfXyBcXCB8X3wgfCAgfCB8X3wgfCAoX198IHx8IChffCB8IHxfKSB8IHwgIF9fLyB8IHxfX198IHwgKF98IFxcX18gXFxfXyBcXCBcbiAqIFxcX19fX1xcX19fL3xffCB8X3xfX18vXFxfX3xffCAgIFxcX18sX3xcXF9fX3xcXF9fXFxfXyxffF8uX18vfF98XFxfX198ICBcXF9fX198X3xcXF9fLF98X19fL19fXy8gXG4gIFxuICAgQ3JlYXRpb24gb2YgQ29uc3RydWN0YWJsZSBjbGFzcyByZWxpZXMgb24gZnVuY3Rpb25hbGl0eSBmcm9tIGl0J3Mgb3duIHByb3RvdHlwZS4gVGhlcmVmb3JlIGRlZmluaW5nIGZ1bmN0aW9uYWxpdHkgaW1wbGVtZW50YXRpb25zIGNvbWVzIGJlZm9yZSB0aGUgY2xhc3MgY3JlYXRpb24uIFxuICAgQW5vdGhlciB3YXkgY291bGQgYmUgLSB1c2luZyB0aGUgaW1wb3J0ZWQgZnVuY3Rpb25hbGl0aWVzIGFzIHRoZWlyIG93biBzZXBhcmF0ZSBwcm90b3R5cGUsIGJ1dCB0aGlzIHdpbGwgY3JlYXRlIENvbnN0cnVjdGFibGUgaW4gYW5vdGhlciBsZXZlbCBpbiB0aGUgZGVsZWdhdGlvbiBjaGFpbiwgd2hpY2ggaXMgbm90IG5lZWRlZC5cbiovXG5leHBvcnQgY29uc3QgQ29uc3RydWN0YWJsZSA9IFByb3RvdHlwZTo6UHJvdG90eXBlW1JlZmVyZW5jZS5jb25zdHJ1Y3Rvci5mdW5jdGlvbmFsaXR5XS5zd2l0Y2goeyBpbXBsZW1lbnRhdGlvbktleTogUmVmZXJlbmNlLmtleS5jb25zdHJ1Y3RhYmxlQ2xhc3MgfSkoe1xuICBkZXNjcmlwdGlvbjogJ0NvbnN0cnVjdGFibGUnLFxuICByZWZlcmVuY2U6IFJlZmVyZW5jZSxcbiAgcHJvdG90eXBlOiBQcm90b3R5cGUgLyogUGFzc2luZyBwcm90b3R5cGUgJiByZWZlcmVuY2Ugd2lsbCBwcmV2ZW50IGNyZWF0aW9uIG9mIGFub3RoZXIgcHJvdG90eXBlIGNoYWluIGxldmVsLiAqLyxcbn0pXG5cbi8qXG4gICAgX19fXyBfIF8gICAgICAgICAgICBfICAgX19fICAgICAgIF8gICAgICAgICAgICAgX18gICAgICAgICAgICAgICAgXG4gICAvIF9fX3wgKF8pIF9fXyBfIF9fIHwgfF98XyBffF8gX18gfCB8XyBfX18gXyBfXyAvIF98IF9fIF8gIF9fXyBfX18gXG4gIHwgfCAgIHwgfCB8LyBfIFxcICdfIFxcfCBfX3x8IHx8ICdfIFxcfCBfXy8gXyBcXCAnX198IHxfIC8gX2AgfC8gX18vIF8gXFxcbiAgfCB8X19ffCB8IHwgIF9fLyB8IHwgfCB8XyB8IHx8IHwgfCB8IHx8ICBfXy8gfCAgfCAgX3wgKF98IHwgKF98ICBfXy9cbiAgIFxcX19fX3xffF98XFxfX198X3wgfF98XFxfX3xfX198X3wgfF98XFxfX1xcX19ffF98ICB8X3wgIFxcX18sX3xcXF9fX1xcX19ffFxuKi9cbmxldCBwcm90b3R5cGVEZWxlZ2F0aW9uR2V0dGVyID0gQ29uc3RydWN0YWJsZVtSZWZlcmVuY2UucHJvdG90eXBlRGVsZWdhdGlvbi5mdW5jdGlvbmFsaXR5XS5nZXR0ZXJcblByb3RvdHlwZTo6UHJvdG90eXBlW1JlZmVyZW5jZS5jbGllbnRJbnRlcmZhY2UuZnVuY3Rpb25hbGl0eV0uc2V0dGVyKHtcbiAgLyoqXG4gICAqIEV4YW1wbGUgb2YgY29uZmlndXJlZCBjb25zdHJ1Y3RhYmxlIGNyZWF0aW9uOiBcbiAgICBsZXQgY29uZmlndXJlZENvbnN0cnVjdGFibGUgPSBDb25zdHJ1Y3RhYmxlLmNsaWVudEludGVyZmFjZSh7IHBhcmFtZXRlcjogW10gfSlcbiAgICBjb25zdCBFbnRpdHkgPSBuZXcgY29uZmlndXJlZENvbnN0cnVjdGFibGUoeyBkZXNjcmlwdGlvbjogJ0VudGl0eScgfSlcbiAgICovXG4gIFtSZWZlcmVuY2Uua2V5LmNvbnN0cnVjdGFibGVDbGFzc10oe1xuICAgIGNvbnN0cnVjdG9ySW1wbGVtZW50YXRpb24sXG4gICAgcmV0dXJuZWRJbnN0YW5jZUFkYXB0ZXIgPSBpbnN0YW5jZSA9PiAoe1xuICAgICAgY2xhc3M6IGluc3RhbmNlLFxuICAgICAgcmVmZXJlbmNlOiBpbnN0YW5jZVtSZWZlcmVuY2UucmVmZXJlbmNlXSxcbiAgICAgIGNvbnN0cnVjdGFibGVQcm90b3R5cGU6IGluc3RhbmNlOjpwcm90b3R5cGVEZWxlZ2F0aW9uR2V0dGVyKFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzKS5wcm90b3R5cGUsXG4gICAgfSksXG4gICAgY2FsbGVyQ2xhc3MgPSB0aGlzLFxuICB9ID0ge30pIHtcbiAgICBsZXQgY29uc3RydWN0b3JTd2l0Y2ggPSBDb25zdHJ1Y3RhYmxlW1JlZmVyZW5jZS5jb25zdHJ1Y3Rvci5mdW5jdGlvbmFsaXR5XS5zd2l0Y2gsXG4gICAgICBjbGllbnRJbnRlcmZhY2VTd2l0Y2ggPSBDb25zdHJ1Y3RhYmxlW1JlZmVyZW5jZS5jbGllbnRJbnRlcmZhY2UuZnVuY3Rpb25hbGl0eV0uc3dpdGNoLFxuICAgICAgcHJvdG90eXBlRGVsZWdhdGlvbkdldHRlciA9IENvbnN0cnVjdGFibGVbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV0uZ2V0dGVyXG4gICAgbGV0IGNvbmZpZ3VyZWRDb25zdHJ1Y3RhYmxlSW1wbGVtZW50YXRpb24gPSBSZWZlcmVuY2Uua2V5LmNvbmZpZ3VyZWRDbGFzcyxcbiAgICAgIGNsaWVudEludGVyZmFjZUltcGxlbWVudGF0aW9uID0gUmVmZXJlbmNlLmtleS5jb25zdHJ1Y3RhYmxlQ2xhc3NcblxuICAgIGNvbnN0IHByb3hpZWRUYXJnZXQgPSBuZXcgUHJveHkoZnVuY3Rpb24oKSB7fSwge1xuICAgICAgY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRMaXN0LCBwcm94aWVkVGFyZ2V0KSB7XG4gICAgICAgIGlmIChjYWxsZXJDbGFzcy5wYXJhbWV0ZXIpIG1lcmdlQXJyYXlXaXRoT2JqZWN0SXRlbSh7IGxpc3RUYXJnZXQ6IGFyZ3VtZW50TGlzdCwgbGlzdERlZmF1bHQ6IGNhbGxlckNsYXNzLnBhcmFtZXRlciB9KSAvLyBpbiBjYXNlIGNvbmZpZ3VyZWQgY29uc3RydWN0YWJsZSB3aGljaCBob2xkcyBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZXMuXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IGNhbGxlckNsYXNzOjpjb25zdHJ1Y3RvclN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBjb25zdHJ1Y3RvckltcGxlbWVudGF0aW9uIH0pKC4uLmFyZ3VtZW50TGlzdClcbiAgICAgICAgcmV0dXJuIHJldHVybmVkSW5zdGFuY2VBZGFwdGVyID8gcmV0dXJuZWRJbnN0YW5jZUFkYXB0ZXIoaW5zdGFuY2UpIDogaW5zdGFuY2VcbiAgICAgIH0sXG4gICAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIFt7IGRlc2NyaXB0aW9uLCBwYXJhbWV0ZXIgPSBbXSB9ID0ge31dKSB7XG4gICAgICAgIGxldCBuZXdDb25maWd1cmVkQ29uc3RydWN0YWJsZSA9IGNhbGxlckNsYXNzOjpjb25zdHJ1Y3RvclN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBjb25maWd1cmVkQ29uc3RydWN0YWJsZUltcGxlbWVudGF0aW9uIH0pKHsgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLCBwYXJhbWV0ZXIgfSlcbiAgICAgICAgbGV0IGNsaWVudEludGVyZmFjZSA9IG5ld0NvbmZpZ3VyZWRDb25zdHJ1Y3RhYmxlOjpjbGllbnRJbnRlcmZhY2VTd2l0Y2goeyBpbXBsZW1lbnRhdGlvbktleTogY2xpZW50SW50ZXJmYWNlSW1wbGVtZW50YXRpb24gfSkoKVxuICAgICAgICByZXR1cm4gY2xpZW50SW50ZXJmYWNlXG4gICAgICB9LFxuICAgIH0pXG4gICAgcmV0dXJuIHByb3hpZWRUYXJnZXRcbiAgfSxcbn0pXG5cbkNvbnN0cnVjdGFibGUuY2xpZW50SW50ZXJmYWNlID0gQ29uc3RydWN0YWJsZTo6Q29uc3RydWN0YWJsZVtSZWZlcmVuY2UuY2xpZW50SW50ZXJmYWNlLmZ1bmN0aW9uYWxpdHldLnN3aXRjaCh7IGltcGxlbWVudGF0aW9uS2V5OiBSZWZlcmVuY2Uua2V5LmNvbnN0cnVjdGFibGVDbGFzcyB9KSh7XG4gIGNvbnN0cnVjdG9ySW1wbGVtZW50YXRpb246IFJlZmVyZW5jZS5rZXkuY29uc3RydWN0YWJsZUNsYXNzLFxufSlcbiJdfQ==