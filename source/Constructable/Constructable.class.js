"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.Constructable = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _SymbolReference = require("../functionalityPrototype/Symbol.reference.js");
var _exportFunctionality = require("../functionalityPrototype/exportFunctionality.js");
var _createObjectWithDelegation = require("../utility/createObjectWithDelegation.js");
var _generatorExecutionControl = require("../utility/generatorExecutionControl.js");
var _mergeProperty = require("../utility/mergeProperty.js");var _g4, _g8;


const Reference = Object.assign(
Object.create(Object.prototype),
{
  reference: 'reference',
  prototype: Symbol('prototype'),
  class: Symbol('class'),
  metadata: _SymbolReference.metadata },

_exportFunctionality.instantiateInitialize.Reference,
_exportFunctionality.constructor.Reference,
_exportFunctionality.clientInterface.Reference);


const Prototype = Object.assign(Object.create(Object.prototype), _exportFunctionality.instantiateInitialize.Prototype, _exportFunctionality.constructor.Prototype, _exportFunctionality.clientInterface.Prototype);









Reference.prototypeDelegation.key = {

  constructable: Symbol('constructable functionality prototypeDelegation') };

Prototype[Reference.prototypeDelegation.setter.list]({
  [Reference.prototypeDelegation.key.constructable]: {
    prototype: Prototype,
    reference: Reference } });











Reference.instantiate.key = {

  createObjectWithDelegation: Symbol('Funtionality:instantiate.key.createObjectWithDelegation') };

Prototype[Reference.instantiate.setter.list]({
  [Reference.instantiate.key.createObjectWithDelegation]: _createObjectWithDelegation.createObjectWithDelegation });









Reference.initialize.key = {

  constructable: Symbol('Funtionality:initialize.key.constructable'),
  configuredConstructor: Symbol('Funtionality:initialize.key.configuredConstructor') };

Prototype[Reference.initialize.setter.list]({

  [Reference.initialize.key.constructable]: function initializeConstuctable({ targetInstance, reference, prototype, description, construtorProperty = null } = {}) {
    if (!reference) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.getter.list](Reference.prototypeDelegation.key.constructable);
      reference = Object.create(prototypeDelegationSetting.reference || null);
    }
    if (!prototype) {
      let prototypeDelegationSetting = construtorProperty[Reference.prototypeDelegation.getter.list](Reference.prototypeDelegation.key.constructable);
      prototype = Object.create(prototypeDelegationSetting.prototype || null);
    }
    Object.setPrototypeOf(targetInstance, prototype);

    targetInstance[Reference.prototypeDelegation.setter.list].call(targetInstance, {
      [Reference.prototypeDelegation.key.constructable]: {
        prototype: prototype,
        reference: reference } });


    (0, _mergeProperty.mergeNonexistentProperties)(targetInstance, {





      get [Reference.reference]() {
        return targetInstance[Reference.prototypeDelegation.getter.list](Reference.prototypeDelegation.key.constructable).reference;
      },
      get [Reference.prototype]() {
        return targetInstance[Reference.prototypeDelegation.getter.list](Reference.prototypeDelegation.key.constructable).prototype;
      },
      [Reference.class]: construtorProperty });


    Object.defineProperty(targetInstance, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(description) } });
    if (!prototype.hasOwnProperty(Reference.metadata))
    Object.defineProperty(prototype, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(`${description} functionality`) } });
    return targetInstance;
  },
  [Reference.initialize.key.configuredConstructor]({ description, targetInstance, parameter = [] } = {}) {
    Object.defineProperty(targetInstance, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(description) } });
    targetInstance.parameter = parameter;
    return targetInstance;
  } });









Reference.constructor.key = {

  constructable: Symbol('Funtionality:constructor.key.constructable'),

  configuredConstructable: Symbol('Funtionality:constructor.key.configuredConstructable') };

Prototype[Reference.constructor.setter.list]({


  [Reference.constructor.key.constructable]: (function () {let _ref = function* ({ description, reference, prototype, prototypeDelegation, self = this } = {}) {let _functionSent = yield;
      const shouldHandOverControl = _generatorExecutionControl.executionControl.shouldHandOver(_functionSent);
      prototypeDelegation || (prototypeDelegation = self[Reference.prototype]);
      const step = [

      {
        passThroughArg: { description, prototypeDelegation: prototypeDelegation },
        func: function (previousArg, arg) {var _g, _context;
          let instance = (_g = (_context = self, self[Reference.instantiate.switch]).call(_context, { implementationKey: Reference.instantiate.key.createObjectWithDelegation }), _g.next('intermittent') && _g.next(arg).value);
          return { instance };
        },
        condition: true },

      {
        passThroughArg: { description, reference, prototype, construtorProperty: self },
        func: function ({ instance }, arg) {var _ref4, _context2;
          _ref4 = (_context2 = self, self[Reference.initialize.switch]).call(_context2, { implementationKey: Reference.initialize.key.constructable, recursiveDelegationChainExecution: true }), (
          g => {
            g.next('intermittent');

            let argumentList = Object.assign({ targetInstance: instance }, arg);
            let generator;
            do {
              generator = g.next(argumentList);
            } while (!generator.done);

          })(_ref4);
          return instance;
        },
        condition: true }];




      let i = 0,
      result;
      while (i < step.length) {
        if (step[i].condition == false) {
          i++;
          continue;
        }
        if (shouldHandOverControl) {
          _functionSent = yield step[i].passThroughArg;
          result = step[i].func(result, _functionSent);
        } else {
          result = step[i].func(result, step[i].passThroughArg);
        }
        i++;
      }
      return result;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})(),
  [Reference.constructor.key.configuredConstructable]({ description = 'Configured constructable instance.', self = this, parameter } = {}) {var _g2, _g3;
    let instance = (_g2 =
    self[Reference.instantiate.switch]({ implementationKey: Reference.instantiate.key.createObjectWithDelegation }),
    _g2.next('intermittent') && _g2.next({ description, prototypeDelegation: self }).value);
    _g3 = self[Reference.initialize.switch]({ implementationKey: Reference.initialize.key.configuredConstructor }),
    _g3.next('intermittent') && _g3.next({ description, targetInstance: instance, parameter }).value;
    return instance;
  } });












const Constructable = (_g4 =
Prototype[Reference.constructor.switch]({ implementationKey: Reference.constructor.key.constructable }),

_g4.next('intermittent') &&
_g4.next({ description: 'Constructable', reference: Reference, prototype: Prototype }).value);exports.Constructable = Constructable;








Reference.clientInterface.key = {
  constructable: Symbol('Funtionality:clientInterface.key.constructable') };

Prototype[Reference.clientInterface.setter.list]({





  [Reference.clientInterface.key.constructable]({ self = this } = {}) {
    let constructorSwitch = Constructable[Reference.constructor.switch],
    clientInterfaceSwitch = Constructable[Reference.clientInterface.switch];
    let constructorImplementation = Reference.constructor.key.constructable,
    configuredConstructableImplementation = Reference.constructor.key.configuredConstructable,
    clientInterfaceImplementation = Reference.clientInterface.key.constructable;

    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g5;
        if (self.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: self.parameter });
        let instance = (_g5 = constructorSwitch.call(self, { implementationKey: constructorImplementation }), _g5.next('intermittent') && _g5.next(...argumentList).value);
        return instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g6, _g7;
        let newConfiguredConstructable = (_g6 =
        constructorSwitch.call(self, { implementationKey: configuredConstructableImplementation }), _g6.next('intermittent') && _g6.next({ description: description, parameter }).value);
        let clientInterface = (_g7 = clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }), _g7.next('intermittent') && _g7.next().value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });


Constructable.clientInterface = (_g8 = Constructable[Reference.clientInterface.switch]({ implementationKey: Reference.clientInterface.key.constructable }), _g8.next('intermittent') && _g8.next().value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,