"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.Prototype = exports.Reference = exports.Entity = void 0;var _ConstructableClass = require("./Constructable.class.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var symbol = _interopRequireWildcard(require("../functionalityPrototype/Symbol.reference.js"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");
var _delegatedLookup = require("../utility/delegatedLookup.js");


const instantiateSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.instantiate.functionality].switch,
initializeSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.initialize.functionality].switch,
constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.constructor.functionality].switch,
clientInterfaceSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.clientInterface.functionality].switch;

const { class: Entity, reference: Reference, constructablePrototype: Prototype } = new _ConstructableClass.Constructable.clientInterface({ description: 'Entity' });exports.Prototype = Prototype;exports.Reference = Reference;exports.Entity = Entity;
Object.assign(Reference, {
  key: {
    multipleDelegation: Symbol('Multiple delegation'),
    concereteBehavior: Symbol('Concerete Behavior / Implementation'),
    mergeDataToInstance: Symbol('mergeDataToInstance'),
    handleDataInstance: Symbol('handleDataInstance'),
    entityClass: Symbol('entity class related'),
    prototypeForInstance: Symbol('prototype delegation object creation for Entity instances.'),
    entityInstance: Symbol('Entity instance related'),
    instanceDelegatingToEntityInstancePrototype: Symbol('instanceDelegatingToEntityInstancePrototype') },


  getInstanceOf: Symbol('Entity:getInstanceOf prototype chian lookup') });










Prototype[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(Prototype, {

  [Reference.key.entityInstance]: {
    prototype: {

      [symbol.metadata]: { type: 'Prototype of Entity pattern - on toplevel Entity constructable.' },
      [Reference.getInstanceOf](Class, callerInstance = this) {

        return (0, _delegatedLookup.conditionDelegatedLookup)({ target: callerInstance, conditionCheck: prototypeTarget => prototypeTarget.constructor === Class });
      } } } });











Prototype[_ConstructableClass.Constructable.reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.entityInstance]({ targetInstance, prototype, construtorProperty }, previousResult) {
    if (!prototype) {
      let prototypeDelegationSetting = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(construtorProperty, Reference.key.entityInstance);
      prototype = prototypeDelegationSetting.prototype;
    }
    Object.setPrototypeOf(targetInstance, prototype);
  },
  [Reference.key.multipleDelegation]({ targetInstance, delegationList = [] }, previousResult) {
    if (delegationList.length == 0) return;
    _multiplePrototypeDelegation.MultipleDelegation.addDelegation({ targetObject: targetInstance, delegationList });
  },

  [Reference.key.mergeDataToInstance]({ data = {}, targetInstance } = {}) {
    Object.assign(targetInstance, data);
    return targetInstance;
  },






  [Reference.key.entityClass]({ targetInstance, callerClass = this } = {}) {
    let entityPrototypeDelegation = constructorSwitch.call(callerClass, { implementationKey: Entity.reference.key.prototypeForInstance })({ description: 'Prototype for entity instances' });

    let targetConstructablePrototype = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(targetInstance, _ConstructableClass.Constructable.reference.key.constructableClass).prototype;
    _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(targetConstructablePrototype, {
      [Entity.reference.key.entityInstance]: {
        prototype: entityPrototypeDelegation } });


    return targetInstance;
  } });









Prototype[_ConstructableClass.Constructable.reference.constructor.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]({ description, callerClass = this } = {}) {
    let entityClass = constructorSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.constructableClass })({ description });
    initializeSwitch.call(entityClass, { implementationKey: Reference.key.entityClass })({ targetInstance: entityClass });
    return entityClass;
  },
  [Reference.key.multipleDelegation]({ delegationList, callerClass = this } = {}) {

    let instance = instantiateSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.createObjectWithDelegation })({ instanceType: 'object' });


    initializeSwitch.call(callerClass, { implementationKey: Reference.key.entityInstance, recursiveDelegationChainExecution: true })({ targetInstance: instance, construtorProperty: callerClass });


    initializeSwitch.call(callerClass, { implementationKey: Reference.key.multipleDelegation })({ targetInstance: instance, delegationList });

    return instance;
  },

  [Reference.key.concereteBehavior]({
    concreteBehaviorList = [],
    constructorImplementation = Reference.key.mergeDataToInstance,
    constructorCallback,

    interceptCallback = false || (

    (constructorCallback) =>
    new Proxy(constructorCallback, {
      apply(target, thisArg, argumentList) {
        return Reflect.apply(...arguments);
      } })),

    callerClass = this })
  {
    constructorCallback || (constructorCallback = (...args) => {
      let instance = constructorSwitch.call(callerClass, { implementationKey: constructorImplementation })(...args);
      args[0].targetInstance = instance;
      initializeSwitch.call(callerClass, { implementationKey: Reference.key.concereteBehavior, recursiveDelegationChainExecution: true })(...args);
      return instance;
    });

    for (let concereteBehavior of concreteBehaviorList) {
      if (concereteBehavior[Reference.key.concereteBehavior])
      constructorCallback = concereteBehavior[Reference.key.concereteBehavior]({ constructorCallback, currentConcereteBehavior: concereteBehavior });
    }

    if (interceptCallback) constructorCallback = interceptCallback(constructorCallback);
    return constructorCallback(...arguments);
  },

  [Reference.key.mergeDataToInstance]({ data, delegationList, callerClass = this } = {}) {
    let instance = constructorSwitch.call(callerClass, { implementationKey: Reference.key.multipleDelegation })({ delegationList });

    initializeSwitch.call(callerClass, { implementationKey: Reference.key.mergeDataToInstance, recursiveDelegationChainExecution: true })({ targetInstance: instance, data: data });
    return instance;
  },

  [Reference.key.handleDataInstance]({ data, delegationList, callerClass = this } = {}) {
    let instance = constructorSwitch.call(callerClass, { implementationKey: Reference.key.multipleDelegation })({ delegationList });

    initializeSwitch.call(callerClass, { implementationKey: Reference.key.handleDataInstance, recursiveDelegationChainExecution: true })({ targetInstance: instance, data: data });
    return instance;
  },

  [Reference.key.prototypeForInstance]({ propertyObject, callerClass = this, description } = {}, previousResult) {

    let parentEntityPrototypeDelegation = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(callerClass, Reference.key.entityInstance).prototype || null;
    let instance = instantiateSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.createObjectWithDelegation })({ description, prototypeDelegation: parentEntityPrototypeDelegation });
    initializeSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.classInstance })({ targetInstance: instance, description: description });
    if (propertyObject) Object.assign(instance, propertyObject);
    return instance;
  } });









Prototype[_ConstructableClass.Constructable.reference.clientInterface.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]({ callerClass = this }) {
    let clientInterface = clientInterfaceSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.constructableClass })({
      constructorImplementation: Reference.key.entityClass,
      returnedInstanceAdapter: instance => ({
        class: instance,
        reference: instance[_ConstructableClass.Constructable.reference.reference],
        constructablePrototype: _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(instance, _ConstructableClass.Constructable.reference.key.constructableClass).prototype,
        entityPrototype: _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(instance, Reference.key.entityInstance).prototype }) });


    return clientInterface;
  },


  [Reference.key.instanceDelegatingToEntityInstancePrototype]({
    constructorImplementation,

    clientInterfaceInterceptCallback = clientInterfaceTarget => clientInterfaceSwitch.call(callerClass, { implementationKey: 'argumentsAdapterOnConstruction' })({ clientInterfaceTarget }),
    clientInterfaceCallbackList = [],
    callerClass = this } =
  {}) {
    if (!constructorImplementation) throw new Error('â€¢ Parameter `constructorImplementation` must be passed.');
    if (clientInterfaceInterceptCallback) clientInterfaceCallbackList.push(clientInterfaceInterceptCallback);

    let createClientInterface = (initialProxyTarget = function () {}) => {
      let constructCallback = argumentList => constructorSwitch.call(callerClass, { implementationKey: constructorImplementation })(...argumentList);
      return new Proxy(initialProxyTarget, {
        construct(target, argumentList, proxiedTarget) {
          if (callerClass.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: callerClass.parameter });
          return constructCallback(argumentList);
        },
        apply(target, thisArg, [{ description, parameter = [], clientInterfaceInterceptCallback = false } = {}]) {
          let newConfiguredConstructable = constructorSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.configuredClass })({ description, parameter });

          return clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: Reference.key.instanceDelegatingToEntityInstancePrototype })({
            constructorImplementation,
            clientInterfaceInterceptCallback,
            clientInterfaceCallbackList });

        } });

    };

    let clientInterfaceTarget = createClientInterface();
    clientInterfaceTarget = clientInterfaceCallbackList.reduce((accumulator, callback) => callback(accumulator), clientInterfaceTarget);
    return clientInterfaceTarget;
  },

  argumentsAdapterOnConstruction({
    clientInterfaceTarget,
    argumentListAdapter = argumentList => argumentList[0] = { data: argumentList[0] } })
  {
    return new Proxy(clientInterfaceTarget, {
      construct(target, argumentList, proxiedTarget) {
        argumentListAdapter(argumentList);
        return Reflect.construct(target, argumentList, proxiedTarget);
      } });

  } });



Entity.clientInterface = clientInterfaceSwitch.call(Entity, { implementationKey: Reference.key.entityClass })({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,