"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.Prototype = exports.Reference = exports.Entity = void 0;var _ConstructableClass = require("./Constructable.class.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var symbol = _interopRequireWildcard(require("../functionalityPrototype/Symbol.reference.js"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");var _g11;

const { class: Entity, reference: Reference, constructablePrototype: Prototype } = new _ConstructableClass.Constructable.clientInterface({ description: 'Entity' });exports.Prototype = Prototype;exports.Reference = Reference;exports.Entity = Entity;
Object.assign(Reference, {
  key: {
    multipleDelegation: Symbol('Multiple delegation initialization'),
    data: Symbol('data initialization'),
    entityClass: Symbol('entity class related'),
    prototypeForInstance: Symbol('prototype delegation object creation for Entity instances.'),
    entityInstance: Symbol('Entity instance related'),
    instanceDelegatingToClassPrototype: Symbol('instanceDelegatingToClassPrototype') } });











Prototype[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(Prototype, {

  [Reference.key.entityInstance]: {
    prototype: {

      [symbol.metadata]: { type: 'Entity class prototype for `entity` prototypeDelegation chain.' } } } });











Prototype[_ConstructableClass.Constructable.reference.instantiate.functionality].setter.call(Prototype, {});








Prototype[_ConstructableClass.Constructable.reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.entityInstance]({ targetInstance, prototype, construtorProperty }, previousResult) {
    if (!prototype) {
      let prototypeDelegationGetter = construtorProperty[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.bind(construtorProperty);
      let prototypeDelegationSetting = prototypeDelegationGetter.call(construtorProperty, Reference.key.entityInstance);
      prototype = prototypeDelegationSetting.prototype;
    }
    Object.setPrototypeOf(targetInstance, prototype);
  },
  [Reference.key.multipleDelegation]({ targetInstance, delegationList = [] }, previousResult) {var _targetInstance;
    if (delegationList.length == 0) return;
    delegationList.unshift((_targetInstance = targetInstance, Object.getPrototypeOf(_targetInstance)));
    return (0, _multiplePrototypeDelegation.delegateToMultipleObject)({ targetObject: targetInstance, delegationList });
  },

  [Reference.key.data]({ data = {}, targetInstance } = {}) {
    Object.assign(targetInstance, data);
    return targetInstance;
  },






  [Reference.key.entityClass]({ targetInstance, callerClass = this } = {}) {var _g;
    let constructorSwitch = callerClass[_ConstructableClass.Constructable.reference.constructor.functionality].switch.bind(callerClass);
    let entityPrototypeDelegation = (_g =
    constructorSwitch({ implementationKey: Entity.reference.key.prototypeForInstance }), _g.next('intermittent') && _g.next({ description: 'Prototype for entity instances' }).value);
    targetInstance[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(targetInstance, {
      [Entity.reference.key.entityInstance]: {
        prototype: entityPrototypeDelegation } });


    return targetInstance;
  } });









Prototype[_ConstructableClass.Constructable.reference.constructor.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]({ description, callerClass = this } = {}) {var _g2, _g3;
    const initializeSwitch = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch,
    constructorSwitch = callerClass[_ConstructableClass.Constructable.reference.constructor.functionality].switch;
    let entityClass = (_g2 = constructorSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.constructableClass }), _g2.next('intermittent') && _g2.next({ description }).value);
    _g3 = initializeSwitch.call(entityClass, { implementationKey: Reference.key.entityClass }), _g3.next('intermittent') && _g3.next({ targetInstance: entityClass }).value;
    return entityClass;
  },

  [Reference.key.data]({ data, delegationList, callerClass = this } = {}) {var _g4, _ref, _g5, _ref2;
    let instantiateSwitch = callerClass[_ConstructableClass.Constructable.reference.instantiate.functionality].switch,
    initializeSwitch = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch;


    let instance = (_g4 =
    instantiateSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.createObjectWithDelegation }), _g4.next('intermittent') && _g4.next({ instanceType: 'object' }).value);


    _ref = initializeSwitch.call(callerClass, { implementationKey: Reference.key.entityInstance, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, construtorProperty: callerClass, delegationList });
      } while (!generator.done);

    })(_ref);


    _g5 = initializeSwitch.call(callerClass, { implementationKey: Reference.key.multipleDelegation }), _g5.next('intermittent') && _g5.next({ targetInstance: instance, delegationList }).value;


    _ref2 = initializeSwitch.call(callerClass, { implementationKey: Reference.key.data, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, data: data });
      } while (!generator.done);

    })(_ref2);
    return instance;
  },

  [Reference.key.prototypeForInstance]({ propertyObject, callerClass = this, description } = {}, previousResult) {var _g6;
    let instance = (_g6 =
    callerClass[_ConstructableClass.Constructable.reference.constructor.functionality].switch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.classInstance }),
    _g6.next('intermittent') && _g6.next({ description: description }).value);
    if (propertyObject) Object.assign(instance, propertyObject);
    return instance;
  } });









Prototype[_ConstructableClass.Constructable.reference.clientInterface.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]() {
    const callerClass = this;
    let constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.constructor.functionality].switch;
    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g7;
        let instance = (_g7 = constructorSwitch.call(callerClass, { implementationKey: Reference.key.entityClass }), _g7.next('intermittent') && _g7.next(...argumentList).value);
        return {
          class: instance,
          reference: instance[Reference.reference],
          constructablePrototype: instance[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(instance, _ConstructableClass.Constructable.reference.key.constructableClass).prototype,
          entityPrototype: instance[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.call(instance, Reference.key.entityInstance).prototype };

      } });

    return proxiedTarget;
  },



  [Reference.key.instanceDelegatingToClassPrototype]({
    constructorImplementation = function (e) {throw e;}(new Error('â€¢ Parameter `constructorImplementation` must be passed.')),
    configuredConstructableImplementation = _ConstructableClass.Constructable.reference.key.configuredClass,
    clientInterfaceImplementation = Reference.key.instanceDelegatingToClassPrototype,

    argumentListAdapter } =
  {}) {
    const callerClass = this,
    clientInterfaceArguments = arguments;
    let constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.constructor.functionality].switch,
    clientInterfaceSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.clientInterface.functionality].switch;
    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g8;
        if (argumentListAdapter) argumentListAdapter(argumentList);
        if (callerClass.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: callerClass.parameter });
        let instance = (_g8 = constructorSwitch.call(callerClass, { implementationKey: constructorImplementation }), _g8.next('intermittent') && _g8.next(...argumentList).value);
        return instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g9, _g10;
        let newConfiguredConstructable = (_g9 =
        constructorSwitch.call(callerClass, { implementationKey: configuredConstructableImplementation }), _g9.next('intermittent') && _g9.next({ description: description, parameter }).value);
        let clientInterface = (_g10 =
        clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }),
        _g10.next('intermittent') && _g10.next(...clientInterfaceArguments).value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });



Entity.clientInterface = (_g11 =
Entity[_ConstructableClass.Constructable.reference.clientInterface.functionality].switch.call(Entity, { implementationKey: Reference.key.entityClass }), _g11.next('intermittent') && _g11.next({}).value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,