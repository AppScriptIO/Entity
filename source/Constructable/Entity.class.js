"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.Entity = void 0;var _ConstructableClass = require("./Constructable.class.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var symbol = _interopRequireWildcard(require("../functionalityPrototype/Symbol.reference.js"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");var _g8, _g9;
const Entity = new _ConstructableClass.Constructable.clientInterface({ description: 'Entity' });exports.Entity = Entity;

const Reference = Entity[_ConstructableClass.Constructable['reference'].reference];
const Prototype = Entity[_ConstructableClass.Constructable['reference'].prototype];









Reference.prototypeDelegation = {

  key: {
    entity: Symbol('Funtionality:prototypeDelegation.key.entity') } };


Prototype[_ConstructableClass.Constructable['reference'].prototypeDelegation.setter.list]({
  [Reference.prototypeDelegation.key.entity]: {
    prototype: {
      [symbol.metadata]: { type: 'Entity class prototype for `entity` prototypeDelegation chain.' } } } });











Prototype[_ConstructableClass.Constructable['reference'].instantiate.setter.list]({});








Reference.initialize = {
  key: {

    entity: Symbol('Funtionality:initialize.key.entity'),

    data: Symbol('Funtionality:initialize.key.data'),
    configuredClass: Symbol('Funtionality:initialize.key.configuredClass'),
    multipleDelegation: Symbol('Funtionality:initialize.key.multipleDelegation') } };


Prototype[_ConstructableClass.Constructable['reference'].initialize.setter.list]({
  [Reference.initialize.key.entity]({ targetInstance, prototype, construtorProperty }, previousResult) {
    if (!prototype) {
      let prototypeDelegationGetter = construtorProperty[_ConstructableClass.Constructable['reference'].prototypeDelegation.getter.list];
      let prototypeDelegationSetting = prototypeDelegationGetter.call(construtorProperty, Reference.prototypeDelegation.key.entity);
      prototype = prototypeDelegationSetting.prototype;
    }
    Object.setPrototypeOf(targetInstance, prototype);
  },
  [Reference.initialize.key.multipleDelegation]({ targetInstance, delegationList = [] }, previousResult) {var _targetInstance;
    delegationList.unshift((_targetInstance = targetInstance, Object.getPrototypeOf(_targetInstance)));
    return (0, _multiplePrototypeDelegation.delegateToMultipleObject)({ targetObject: targetInstance, delegationList });
  },
  [Reference.initialize.key.data]({ data = {}, targetInstance } = {}) {
    Object.assign(targetInstance, data);
    return targetInstance;
  },




  [Reference.initialize.key.configuredClass]({ description = 'configuredClass', targetInstance, parameter = [] } = {}) {
    Object.defineProperty(targetInstance, Reference.metadata, { writable: false, enumerable: false, value: { type: Symbol(description) } });
    targetInstance.parameter = parameter;
    return targetInstance;
  } });









Reference.constructor = {
  key: {

    data: Symbol('Funtionality:constructor.key.data'),
    configuredClass: Symbol('Funtionality:constructor.key.configuredClass') } };


Prototype[_ConstructableClass.Constructable['reference'].constructor.setter.list]({
  [Reference.constructor.key.data]({ data, delegationList, self = this } = {}) {var _g, _ref, _g2, _ref2;
    let instantiateSwitch = self[_ConstructableClass.Constructable['reference'].instantiate.switch],
    initializeSwitch = self[_ConstructableClass.Constructable['reference'].initialize.switch];


    let instance = (_g =
    instantiateSwitch.call(self, { implementationKey: _ConstructableClass.Constructable['reference'].instantiate.key.createObjectWithDelegation }), _g.next('intermittent') && _g.next({ instanceType: 'object' }).value);


    _ref = initializeSwitch.call(self, { implementationKey: Reference.initialize.key.entity, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, construtorProperty: self, delegationList });
      } while (!generator.done);

    })(_ref);


    _g2 = initializeSwitch.call(self, { implementationKey: Reference.initialize.key.multipleDelegation }), _g2.next('intermittent') && _g2.next({ targetInstance: instance, delegationList }).value;


    _ref2 = initializeSwitch.call(self, { implementationKey: Reference.initialize.key.data, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, data: data });
      } while (!generator.done);

    })(_ref2);
    return instance;
  },
  [Reference.constructor.key.configuredClass]({ description, self = this, parameter } = {}) {var _g3, _g4;
    let instance = (_g3 =
    self[_ConstructableClass.Constructable['reference'].instantiate.switch]({ implementationKey: Reference.instantiate.key.createObjectWithDelegation }),
    _g3.next('intermittent') && _g3.next({ description, prototypeDelegation: self }).value);
    _g4 = self[_ConstructableClass.Constructable['reference'].initialize.switch]({ implementationKey: Reference.initialize.key.configuredClass }),
    _g4.next('intermittent') && _g4.next({ description, targetInstance: instance, parameter }).value;
    return instance;
  } });









Reference.clientInterface = {
  key: {
    entity: Symbol('Funtionality:clientInterface.key.entity') } };


Prototype[_ConstructableClass.Constructable['reference'].clientInterface.setter.list]({
  [Reference.clientInterface.key.entity]({
    constructorImplementation = function (e) {throw e;}(new Error('â€¢ Parameter `constructorImplementation` must be passed.')),
    configuredConstructableImplementation = Reference.constructor.key.configuredClass,
    clientInterfaceImplementation = Reference.clientInterface.key.entity,

    argumentListAdapter } =
  {}) {
    const callerClass = this,
    clientInterfaceArguments = arguments;
    let constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable['reference'].constructor.switch],
    clientInterfaceSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable['reference'].clientInterface.switch];
    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g5;
        if (argumentListAdapter) argumentListAdapter(argumentList);
        if (callerClass.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: callerClass.parameter });
        let instance = (_g5 = constructorSwitch.call(callerClass, { implementationKey: constructorImplementation }), _g5.next('intermittent') && _g5.next(...argumentList).value);
        return instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g6, _g7;
        let newConfiguredConstructable = (_g6 =
        constructorSwitch.call(callerClass, { implementationKey: configuredConstructableImplementation }), _g6.next('intermittent') && _g6.next({ description: description, parameter }).value);
        let clientInterface = (_g7 =
        clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }),
        _g7.next('intermittent') && _g7.next(...clientInterfaceArguments).value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });



Entity.clientInterfaceConstructable = (_g8 =
Entity[_ConstructableClass.Constructable['reference'].clientInterface.switch]({ implementationKey: _ConstructableClass.Constructable['reference'].clientInterface.key.constructable }), _g8.next('intermittent') && _g8.next().value);


Entity.clientInterface = (_g9 =
Entity[_ConstructableClass.Constructable['reference'].clientInterface.switch]({ implementationKey: Reference.clientInterface.key.entity }),

_g9.next('intermittent') &&
_g9.next({
  constructorImplementation: Reference.constructor.key.data }).
value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,