"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.Entity = void 0;var _ConstructableClass = require("./Constructable.class.js");
var _mergeProperty = require("../utility/mergeProperty.js");
var symbol = _interopRequireWildcard(require("../functionalityPrototype/Symbol.reference.js"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");var _g14;

const Entity = new _ConstructableClass.Constructable.clientInterface({ description: 'Entity' });exports.Entity = Entity;
const Reference = Object.assign(Entity[_ConstructableClass.Constructable.reference.reference], {
  key: {
    data: Symbol('data initialization'),
    multipleDelegation: Symbol('Multiple delegation initialization'),
    entityClass: Symbol('entity class related'),
    entity: Symbol('Entity instance related'),
    classInstance: Symbol('class instance related'),
    configuredClass: Symbol('Configured class related'),
    prototype: Symbol('prototype delegation object creation for Entity instances.'),
    instanceDelegatingToClassPrototype: Symbol('instanceDelegatingToClassPrototype') } });


const Prototype = Entity[_ConstructableClass.Constructable.reference.prototype];









Prototype[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(Prototype, {

  [Reference.key.entity]: {
    prototype: {

      [symbol.metadata]: { type: 'Entity class prototype for `entity` prototypeDelegation chain.' } } } });











Prototype[_ConstructableClass.Constructable.reference.instantiate.functionality].setter.call(Prototype, {});








Prototype[_ConstructableClass.Constructable.reference.initialize.functionality].setter.call(Prototype, {

  [Reference.key.entity]({ targetInstance, prototype, construtorProperty }, previousResult) {
    if (!prototype) {
      let prototypeDelegationGetter = construtorProperty[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].getter.bind(construtorProperty);
      let prototypeDelegationSetting = prototypeDelegationGetter.call(construtorProperty, Reference.key.entity);
      prototype = prototypeDelegationSetting.prototype;
    }
    Object.setPrototypeOf(targetInstance, prototype);
  },
  [Reference.key.multipleDelegation]({ targetInstance, delegationList = [] }, previousResult) {var _targetInstance;
    if (delegationList.length == 0) return;
    delegationList.unshift((_targetInstance = targetInstance, Object.getPrototypeOf(_targetInstance)));
    return (0, _multiplePrototypeDelegation.delegateToMultipleObject)({ targetObject: targetInstance, delegationList });
  },

  [Reference.key.data]({ data = {}, targetInstance } = {}) {
    Object.assign(targetInstance, data);
    return targetInstance;
  },







  [Reference.key.classInstance]({ targetInstance, callerClass = this, description = '' } = {}) {
    Object.defineProperty(targetInstance, _ConstructableClass.Constructable.reference.metadata, {
      writable: false,
      enumerable: false,
      value: { type: Symbol(`${callerClass[_ConstructableClass.Constructable.reference.name]} ${description}`) } });

    targetInstance.constructor = callerClass;
    return targetInstance;
  },
  [Reference.key.entityClass]({ targetInstance, callerClass = this } = {}) {var _g;
    let constructorSwitch = callerClass[_ConstructableClass.Constructable.reference.constructor.functionality].switch.bind(callerClass);
    let entityPrototypeDelegation = (_g =
    constructorSwitch({ implementationKey: Entity.reference.key.prototype }), _g.next('intermittent') && _g.next({ description: 'Entity.reference.key.entity' }).value);
    targetInstance[_ConstructableClass.Constructable.reference.prototypeDelegation.functionality].setter.call(targetInstance, {
      [Entity.reference.key.entity]: {
        prototype: entityPrototypeDelegation } });


    return targetInstance;
  } });









Prototype[_ConstructableClass.Constructable.reference.constructor.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]({ description, callerClass = this } = {}) {var _g2, _g3;
    const initializeSwitch = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch,
    constructorSwitch = callerClass[_ConstructableClass.Constructable.reference.constructor.functionality].switch;
    let entityClass = (_g2 = constructorSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.constructable }), _g2.next('intermittent') && _g2.next({ description }).value);
    _g3 = initializeSwitch.call(entityClass, { implementationKey: Reference.key.entityClass }), _g3.next('intermittent') && _g3.next({ targetInstance: entityClass }).value;
    return entityClass;
  },

  [Reference.key.data]({ data, delegationList, callerClass = this } = {}) {var _g4, _ref, _g5, _ref2;
    let instantiateSwitch = callerClass[_ConstructableClass.Constructable.reference.instantiate.functionality].switch,
    initializeSwitch = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch;


    let instance = (_g4 =
    instantiateSwitch.call(callerClass, { implementationKey: _ConstructableClass.Constructable.reference.key.createObjectWithDelegation }), _g4.next('intermittent') && _g4.next({ instanceType: 'object' }).value);


    _ref = initializeSwitch.call(callerClass, { implementationKey: Reference.key.entity, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, construtorProperty: callerClass, delegationList });
      } while (!generator.done);

    })(_ref);


    _g5 = initializeSwitch.call(callerClass, { implementationKey: Reference.key.multipleDelegation }), _g5.next('intermittent') && _g5.next({ targetInstance: instance, delegationList }).value;


    _ref2 = initializeSwitch.call(callerClass, { implementationKey: Reference.key.data, recursiveDelegationChainExecution: true }), (
    g => {
      g.next('intermittent');

      let generator;
      do {
        generator = g.next({ targetInstance: instance, data: data });
      } while (!generator.done);

    })(_ref2);
    return instance;
  },
  [Reference.key.configuredClass]({ description = 'Configued Class', callerClass = this, parameter } = {}) {var _g6, _g7;
    let instance = (_g6 =
    callerClass[_ConstructableClass.Constructable.reference.instantiate.functionality].switch.call(callerClass, { implementationKey: Reference.key.createObjectWithDelegation }),
    _g6.next('intermittent') && _g6.next({ description, prototypeDelegation: callerClass }).value);
    _g7 = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance }),
    _g7.next('intermittent') && _g7.next({ targetInstance: instance, description: description }).value;
    instance.parameter = parameter;
    return instance;
  },

  [Reference.key.prototype]({ propertyObject, callerClass = this, description } = {}, previousResult) {var _g8, _g9;
    let instance = (_g8 =
    callerClass[_ConstructableClass.Constructable.reference.instantiate.functionality].switch.call(callerClass, { implementationKey: Reference.key.createObjectWithDelegation }),
    _g8.next('intermittent') && _g8.next().value);
    _g9 = callerClass[_ConstructableClass.Constructable.reference.initialize.functionality].switch.call(callerClass, { implementationKey: Reference.key.classInstance }),
    _g9.next('intermittent') && _g9.next({ targetInstance: instance, description: description }).value;
    if (propertyObject) Object.assign(instance, propertyObject);
    return instance;
  } });









Prototype[_ConstructableClass.Constructable.reference.clientInterface.functionality].setter.call(Prototype, {

  [Reference.key.entityClass]() {
    const callerClass = this;
    let constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.constructor.functionality].switch;
    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g10;
        let instance = (_g10 = constructorSwitch.call(callerClass, { implementationKey: Reference.key.entityClass }), _g10.next('intermittent') && _g10.next(...argumentList).value);
        return instance;
      } });

    return proxiedTarget;
  },



  [Reference.key.instanceDelegatingToClassPrototype]({
    constructorImplementation = function (e) {throw e;}(new Error('â€¢ Parameter `constructorImplementation` must be passed.')),
    configuredConstructableImplementation = Reference.key.configuredClass,
    clientInterfaceImplementation = Reference.key.instanceDelegatingToClassPrototype,

    argumentListAdapter } =
  {}) {
    const callerClass = this,
    clientInterfaceArguments = arguments;
    let constructorSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.constructor.functionality].switch,
    clientInterfaceSwitch = _ConstructableClass.Constructable[_ConstructableClass.Constructable.reference.clientInterface.functionality].switch;
    const proxiedTarget = new Proxy(function () {}, {
      construct(target, argumentList, proxiedTarget) {var _g11;
        if (argumentListAdapter) argumentListAdapter(argumentList);
        if (callerClass.parameter) (0, _mergeProperty.mergeArrayWithObjectItem)({ listTarget: argumentList, listDefault: callerClass.parameter });
        let instance = (_g11 = constructorSwitch.call(callerClass, { implementationKey: constructorImplementation }), _g11.next('intermittent') && _g11.next(...argumentList).value);
        return instance;
      },
      apply(target, thisArg, [{ description, parameter = [] } = {}]) {var _g12, _g13;
        let newConfiguredConstructable = (_g12 =
        constructorSwitch.call(callerClass, { implementationKey: configuredConstructableImplementation }), _g12.next('intermittent') && _g12.next({ description: description, parameter }).value);
        let clientInterface = (_g13 =
        clientInterfaceSwitch.call(newConfiguredConstructable, { implementationKey: clientInterfaceImplementation }),
        _g13.next('intermittent') && _g13.next(...clientInterfaceArguments).value);
        return clientInterface;
      } });

    return proxiedTarget;
  } });



Entity.clientInterface = (_g14 =
Entity[_ConstructableClass.Constructable.reference.clientInterface.functionality].switch.call(Entity, { implementationKey: Reference.key.entityClass }), _g14.next('intermittent') && _g14.next({}).value);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,