"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.clientInterface = exports.class = exports.$ = void 0;var Functionality = _interopRequireWildcard(require("../Functionality/Functionality.class.js"));
var symbol = _interopRequireWildcard(require("../sharedSymbol.js"));

const { instance: functionality, reference: $ } = Functionality.Constructor();exports.$ = $;


Object.assign($, {
  label: Symbol('label'),
  class: Symbol('class'),
  reference: '$',
  metadata: symbol.metadata,
  parameter: Symbol('parameter'),

  key: {
    classInstance: Symbol('classInstance'),
    constructableInstance: Symbol('constructableInstance') } });







functionality[$.prototypeDelegation.setter].call(functionality, {

  [$.key.constructableInstance]: { instancePrototype: functionality, referencePrototype: $ } });

functionality[$.instantiate.setter].call(functionality, require('./property/instantiate'));
functionality[$.initialize.setter].call(functionality, require('./property/initialize'));
functionality[$.constructor.setter].call(functionality, require('./property/constructor'));
functionality[$.clientInterface.setter].call(functionality, require('./property/clientInterface'));





const Class = functionality[$.constructor.switch].call(functionality, $.key.constructableInstance)({}, { label: 'Constructable' });exports.class = Class;

const clientInterface = Class[$.clientInterface.switch].call(Class, $.key.constructableInstance)({ constructorImplementation: $.key.constructableInstance });exports.clientInterface = clientInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9jb25zdHJ1Y3RhYmxlRWxlbWVudC9Db25zdHJ1Y3RhYmxlL0NvbnN0cnVjdGFibGUuY2xhc3MuanMiXSwibmFtZXMiOlsiaW5zdGFuY2UiLCJmdW5jdGlvbmFsaXR5IiwicmVmZXJlbmNlIiwiJCIsIkZ1bmN0aW9uYWxpdHkiLCJDb25zdHJ1Y3RvciIsIk9iamVjdCIsImFzc2lnbiIsImxhYmVsIiwiU3ltYm9sIiwiY2xhc3MiLCJtZXRhZGF0YSIsInN5bWJvbCIsInBhcmFtZXRlciIsImtleSIsImNsYXNzSW5zdGFuY2UiLCJjb25zdHJ1Y3RhYmxlSW5zdGFuY2UiLCJwcm90b3R5cGVEZWxlZ2F0aW9uIiwic2V0dGVyIiwiaW5zdGFuY2VQcm90b3R5cGUiLCJyZWZlcmVuY2VQcm90b3R5cGUiLCJpbnN0YW50aWF0ZSIsInJlcXVpcmUiLCJpbml0aWFsaXplIiwiY29uc3RydWN0b3IiLCJjbGllbnRJbnRlcmZhY2UiLCJDbGFzcyIsInN3aXRjaCIsImNvbnN0cnVjdG9ySW1wbGVtZW50YXRpb24iXSwibWFwcGluZ3MiOiIrTkFBQTtBQUNBOztBQUVBLE1BQU0sRUFBRUEsUUFBUSxFQUFFQyxhQUFaLEVBQTJCQyxTQUFTLEVBQUVDLENBQXRDLEtBQTRDQyxhQUFhLENBQUNDLFdBQWQsRUFBbEQsQzs7O0FBR0FDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixDQUFkLEVBQWlCO0FBQ2ZLLEVBQUFBLEtBQUssRUFBRUMsTUFBTSxDQUFDLE9BQUQsQ0FERTtBQUVmQyxFQUFBQSxLQUFLLEVBQUVELE1BQU0sQ0FBQyxPQUFELENBRkU7QUFHZlAsRUFBQUEsU0FBUyxFQUFFLEdBSEk7QUFJZlMsRUFBQUEsUUFBUSxFQUFFQyxNQUFNLENBQUNELFFBSkY7QUFLZkUsRUFBQUEsU0FBUyxFQUFFSixNQUFNLENBQUMsV0FBRCxDQUxGOztBQU9mSyxFQUFBQSxHQUFHLEVBQUU7QUFDSEMsSUFBQUEsYUFBYSxFQUFFTixNQUFNLENBQUMsZUFBRCxDQURsQjtBQUVITyxJQUFBQSxxQkFBcUIsRUFBRVAsTUFBTSxDQUFDLHVCQUFELENBRjFCLEVBUFUsRUFBakI7Ozs7Ozs7O0FBaUJlUixhQUFhLENBQUNFLENBQUMsQ0FBQ2MsbUJBQUYsQ0FBc0JDLE1BQXZCLENBQTVCLE1BQUFqQixhQUFhLEVBQThDOztBQUV6RCxHQUFDRSxDQUFDLENBQUNXLEdBQUYsQ0FBTUUscUJBQVAsR0FBK0IsRUFBRUcsaUJBQWlCLEVBQUVsQixhQUFyQixFQUFvQ21CLGtCQUFrQixFQUFFakIsQ0FBeEQsRUFGMEIsRUFBOUMsQ0FBYjs7QUFJZUYsYUFBYSxDQUFDRSxDQUFDLENBQUNrQixXQUFGLENBQWNILE1BQWYsQ0FBNUIsTUFBQWpCLGFBQWEsRUFBc0NxQixPQUFPLENBQUMsd0JBQUQsQ0FBN0MsQ0FBYjtBQUNlckIsYUFBYSxDQUFDRSxDQUFDLENBQUNvQixVQUFGLENBQWFMLE1BQWQsQ0FBNUIsTUFBQWpCLGFBQWEsRUFBcUNxQixPQUFPLENBQUMsdUJBQUQsQ0FBNUMsQ0FBYjtBQUNlckIsYUFBYSxDQUFDRSxDQUFDLENBQUNxQixXQUFGLENBQWNOLE1BQWYsQ0FBNUIsTUFBQWpCLGFBQWEsRUFBc0NxQixPQUFPLENBQUMsd0JBQUQsQ0FBN0MsQ0FBYjtBQUNlckIsYUFBYSxDQUFDRSxDQUFDLENBQUNzQixlQUFGLENBQWtCUCxNQUFuQixDQUE1QixNQUFBakIsYUFBYSxFQUEwQ3FCLE9BQU8sQ0FBQyw0QkFBRCxDQUFqRCxDQUFiOzs7Ozs7QUFNQSxNQUFNSSxLQUFLLEdBQWtCekIsYUFBYSxDQUFDRSxDQUFDLENBQUNxQixXQUFGLENBQWNHLE1BQWYsQ0FBNUIsTUFBQTFCLGFBQWEsRUFBc0NFLENBQUMsQ0FBQ1csR0FBRixDQUFNRSxxQkFBNUMsQ0FBYixDQUFnRixFQUFoRixFQUFvRixFQUFFUixLQUFLLEVBQUUsZUFBVCxFQUFwRixDQUFkLEM7O0FBRUEsTUFBTWlCLGVBQWUsR0FBVUMsS0FBSyxDQUFDdkIsQ0FBQyxDQUFDc0IsZUFBRixDQUFrQkUsTUFBbkIsQ0FBWixNQUFBRCxLQUFLLEVBQWtDdkIsQ0FBQyxDQUFDVyxHQUFGLENBQU1FLHFCQUF4QyxDQUFMLENBQW9FLEVBQUVZLHlCQUF5QixFQUFFekIsQ0FBQyxDQUFDVyxHQUFGLENBQU1FLHFCQUFuQyxFQUFwRSxDQUF4QixDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgRnVuY3Rpb25hbGl0eSBmcm9tICcuLi9GdW5jdGlvbmFsaXR5L0Z1bmN0aW9uYWxpdHkuY2xhc3MuanMnXG5pbXBvcnQgKiBhcyBzeW1ib2wgZnJvbSAnLi4vc2hhcmVkU3ltYm9sLmpzJ1xuXG5jb25zdCB7IGluc3RhbmNlOiBmdW5jdGlvbmFsaXR5LCByZWZlcmVuY2U6ICQgfSA9IEZ1bmN0aW9uYWxpdHkuQ29uc3RydWN0b3IoKSAvLyBjcmVhdGUgb2JqZWN0IHdpdGggbWVyZ2VkIGZ1bmN0aW9uYWxpdHlcblxuLy8gQ29uc3RydWN0YWJsZSBjbGFzcyBzeW1ib2xzXG5PYmplY3QuYXNzaWduKCQsIHtcbiAgbGFiZWw6IFN5bWJvbCgnbGFiZWwnKSwgLy8gb3duIGNsYXNzIG5hbWVcbiAgY2xhc3M6IFN5bWJvbCgnY2xhc3MnKSwgLy8gdGhlIGNvbnN0cnVjdGFibGUgdXNlZCB0byBjcmVhdGUgdGhlIGluc3RhbmNlICh0byB3aGljaCBjbGFzcyBkb2VzIGl0IGJlbG9uZykuXG4gIHJlZmVyZW5jZTogJyQnLCAvLyByZWZlcmVuY2Uga2V5IHRvIGJlIHNldCBvbiB0aGUgY2xhc3MgZm9yIHNob3J0IGFjY2VzcyB0byBgcHJvdG90eXBlRGVsZWdhdGlvbi5yZWZlcmVuY2VgLlxuICBtZXRhZGF0YTogc3ltYm9sLm1ldGFkYXRhLFxuICBwYXJhbWV0ZXI6IFN5bWJvbCgncGFyYW1ldGVyJyksIC8vIGhvbGRzIG92ZXJyaWRpbmcgcGFyYW1ldGVycyBkdXJpbmcgY29uZmlndXJlZCBjb25zdHJ1Y3RhYmxlIGNyZWF0aW9uLlxuICAvLyBrZXkgLSBidWlsdC1pbiBpbXBsZW1lbnRhdGlvbnMga2V5cy5cbiAga2V5OiB7XG4gICAgY2xhc3NJbnN0YW5jZTogU3ltYm9sKCdjbGFzc0luc3RhbmNlJyksIC8vIGNsYXNzIGluc3RhbmNlIHJlbGF0ZWRcbiAgICBjb25zdHJ1Y3RhYmxlSW5zdGFuY2U6IFN5bWJvbCgnY29uc3RydWN0YWJsZUluc3RhbmNlJyksIC8vIENvbnN0cnVjdGFibGUgcmVsYXRlZFxuICB9LFxufSlcblxuLypcbkNyZWF0aW9uIG9mIENvbnN0cnVjdGFibGUgY2xhc3MgcmVsaWVzIG9uIGZ1bmN0aW9uYWxpdHkgZnJvbSBpdCdzIG93biBwcm90b3R5cGUuIFRoZXJlZm9yZSBkZWZpbmluZyBmdW5jdGlvbmFsaXR5IGltcGxlbWVudGF0aW9ucyBjb21lcyBiZWZvcmUgdGhlIGNsYXNzIGNyZWF0aW9uLiBcbkFub3RoZXIgd2F5IGNvdWxkIGJlIC0gdXNpbmcgdGhlIGltcG9ydGVkIGZ1bmN0aW9uYWxpdGllcyBhcyB0aGVpciBvd24gc2VwYXJhdGUgcHJvdG90eXBlLCBidXQgdGhpcyB3aWxsIGNyZWF0ZSBDb25zdHJ1Y3RhYmxlIGluIGFub3RoZXIgbGV2ZWwgaW4gdGhlIGRlbGVnYXRpb24gY2hhaW4sIHdoaWNoIGlzIG5vdCBuZWVkZWQuXG4qL1xuZnVuY3Rpb25hbGl0eTo6ZnVuY3Rpb25hbGl0eVskLnByb3RvdHlwZURlbGVnYXRpb24uc2V0dGVyXSh7XG4gIC8vIG9iamVjdHMgdGhhdCB3aWxsIGJlIHVzZWQgaW4gY3JlYXRpb24gb2YgdGhlIG1haW4gQ29udHJ1Y3RhYmxlIGNsYXNzLlxuICBbJC5rZXkuY29uc3RydWN0YWJsZUluc3RhbmNlXTogeyBpbnN0YW5jZVByb3RvdHlwZTogZnVuY3Rpb25hbGl0eSwgcmVmZXJlbmNlUHJvdG90eXBlOiAkIH0sXG59KVxuZnVuY3Rpb25hbGl0eTo6ZnVuY3Rpb25hbGl0eVskLmluc3RhbnRpYXRlLnNldHRlcl0ocmVxdWlyZSgnLi9wcm9wZXJ0eS9pbnN0YW50aWF0ZScpKVxuZnVuY3Rpb25hbGl0eTo6ZnVuY3Rpb25hbGl0eVskLmluaXRpYWxpemUuc2V0dGVyXShyZXF1aXJlKCcuL3Byb3BlcnR5L2luaXRpYWxpemUnKSlcbmZ1bmN0aW9uYWxpdHk6OmZ1bmN0aW9uYWxpdHlbJC5jb25zdHJ1Y3Rvci5zZXR0ZXJdKHJlcXVpcmUoJy4vcHJvcGVydHkvY29uc3RydWN0b3InKSlcbmZ1bmN0aW9uYWxpdHk6OmZ1bmN0aW9uYWxpdHlbJC5jbGllbnRJbnRlcmZhY2Uuc2V0dGVyXShyZXF1aXJlKCcuL3Byb3BlcnR5L2NsaWVudEludGVyZmFjZScpKVxuXG4vKiBcbiAgUnVubmluZyBgY29uc3RydWN0YWJsZUluc3RhbmNlYCBjb25zdHJ1Y3RvciB3aWxsIGNyZWF0ZSBhbiBpbnN0YW5jZSB1c2luZyB0aGUgYGNvbnN0cnVjdGFibGVJbnN0YW5jZWAgZGVsZWdhdGlvblByb3RvdHlwZSBzZXR0aW5ncyBzZXQgb24gdGhlIGNhbGxlciAoZnVuY3Rpb25hbGl0eSkuXG4gIEFuZCB3aWxsIGFsc28gc2V0IGEgbmV3IGRlbGVnYXRpb25Qcm90b3R5cGUgc2V0dGluZyBmb3IgdGhlIGNyZWF0ZWQgaW5zdGFuY2UuIGkuZS4gdGhlIG5ldyBkZWxlZ2F0aW9uIHNldHRpbmcgd2lsbCBwb2ludCB0byBvYmplY3RzIGRlbGVnYXRpbmcgdG8gdGhlIHByZXZpb3VzIG9uZS5cbiovXG5jb25zdCBDbGFzcyA9IGZ1bmN0aW9uYWxpdHk6OmZ1bmN0aW9uYWxpdHlbJC5jb25zdHJ1Y3Rvci5zd2l0Y2hdKCQua2V5LmNvbnN0cnVjdGFibGVJbnN0YW5jZSkoe30sIHsgbGFiZWw6ICdDb25zdHJ1Y3RhYmxlJyB9KVxuXG5jb25zdCBjbGllbnRJbnRlcmZhY2UgPSBDbGFzczo6Q2xhc3NbJC5jbGllbnRJbnRlcmZhY2Uuc3dpdGNoXSgkLmtleS5jb25zdHJ1Y3RhYmxlSW5zdGFuY2UpKHsgY29uc3RydWN0b3JJbXBsZW1lbnRhdGlvbjogJC5rZXkuY29uc3RydWN0YWJsZUluc3RhbmNlIH0pXG5cbmV4cG9ydCB7ICQsIENsYXNzIGFzIGNsYXNzLCBjbGllbnRJbnRlcmZhY2UgfVxuIl19