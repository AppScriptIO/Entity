"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");Object.defineProperty(exports, "__esModule", { value: true });exports.clientInterface = exports.class = exports.$ = void 0;var _delegatedLookup = require("../../utility/delegatedLookup.js");
var Constructable = _interopRequireWildcard(require("../Constructable/Constructable.class.js"));
var symbol = _interopRequireWildcard(require("../sharedSymbol.js"));var _instancePrototype;

const { class: Class, reference: $ } = new Constructable.clientInterface({ label: 'Entity' });exports.$ = $;exports.class = Class;


Object.assign($, {
  metadata: symbol.metadata,

  getInstanceOf: Symbol('Entity:getInstanceOf prototype chian lookup'),
  parameter: Symbol('parameter'),
  key: {
    stateInstance: Symbol('stateInstance'),
    concereteBehavior: Symbol('concereteBehavior'),
    handleDataInstance: Symbol('handleDataInstance') } });





_instancePrototype = Class[$.prototypeDelegation.getter].call(Class, Constructable.$.key.constructableInstance).instancePrototype, (
prototype => {

  Class[Constructable.$.prototypeDelegation.setter].call(prototype, {
    [$.key.stateInstance]: {
      instancePrototype: {
        constructor: Class,

        [$.metadata]: { type: 'Prototype of Entity pattern - on toplevel Entity constructable.' },
        [$.getInstanceOf](Class, { recursive = false } = {}) {

          return (0, _delegatedLookup.conditionDelegatedLookup)({ target: this, recursive, conditionCheck: prototypeTarget => prototypeTarget.constructor === Class });
        } } } });



  Class[Constructable.$.initialize.setter].call(prototype, require('./property/initialize'));
  Class[Constructable.$.constructor.setter].call(prototype, require('./property/constructor'));
  Class[Constructable.$.clientInterface.setter].call(prototype, require('./property/clientInterface'));
})(_instancePrototype);

const clientInterface = {
  constructableInstance: Class[Constructable.$.clientInterface.switch].call(Class, Constructable.$.key.constructableInstance)({ constructorImplementation: Constructable.$.key.constructableInstance }),
  stateInstance: Class[Constructable.$.clientInterface.switch].call(Class, $.key.stateInstance)({ constructorImplementation: $.key.stateInstance }) };exports.clientInterface = clientInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,