"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _EntityClass = require("../Entity.class.js");
var Constructable = _interopRequireWildcard(require("../../Constructable/Constructable.class.js"));
var _instantiate = require("../../Constructable/property/instantiate.js");
var _handlePrototypeDelegation = require("@dependency/handlePrototypeDelegation");

function createStateInstanceWithMultipleDelegation({ delegationList = [] } = {}) {
  const callerClass = this;
  let stateDelegationSetting = callerClass[Constructable.$.prototypeDelegation.getter].call(callerClass, _EntityClass.$.key.stateInstance);

  let instance = (0, _instantiate.createObjectWithDelegation)({ instanceType: 'object' });
  Object.setPrototypeOf(instance, stateDelegationSetting.instancePrototype);


  if (delegationList.length > 0) _handlePrototypeDelegation.MultipleDelegation.addDelegation({ targetObject: instance, delegationList });
  return instance;
}





module.exports = {



  [_EntityClass.$.key.stateInstance]({ callerClass = this } = {}, { delegationList } = {}) {
    let instance = createStateInstanceWithMultipleDelegation.call(callerClass, { delegationList });
    return instance;
  },


  [_EntityClass.$.key.handleDataInstance]({ callerClass = this } = {}, ...args) {
    let instance = createStateInstanceWithMultipleDelegation.call(callerClass);

    callerClass[Constructable.$.initialize.switch].call(callerClass, _EntityClass.$.key.handleDataInstance, { recursiveDelegationChainExecution: true })({ targetInstance: instance }, ...args);
    return instance;
  },





  [_EntityClass.$.key.concereteBehavior]({ callerClass = this } = {}, { delegationList, concreteBehaviorList = [] }) {

    let instance = createStateInstanceWithMultipleDelegation.call(callerClass, { delegationList });


    callerClass[Constructable.$.initialize.switch].call(callerClass, _EntityClass.$.key.concereteBehavior, { recursiveDelegationChainExecution: true })({ targetInstance: instance }, { concreteBehaviorList });









    for (let concereteBehavior of concreteBehaviorList) {
      if (concereteBehavior[_EntityClass.$.key.concereteBehavior]) concereteBehavior[_EntityClass.$.key.concereteBehavior]({ targetInstance: instance }, { concereteBehavior });
    }

    return instance;
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,