"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.apply = apply;exports.f = exports.$ = void 0;
var _prototypeMethod = require("../prototypeMethod.js");


const $ = {

  prototypeDelegation: {
    getter: Symbol('prototypeDelegation.getter'),
    setter: Symbol('prototypeDelegation.setter'),
    list: Symbol('prototypeDelegation.list') },


  instantiate: {
    switch: Symbol('instantiate.switch'),
    setter: Symbol('instantiate.setter'),
    getter: Symbol('instantiate.getter'),
    fallback: Symbol('instantiate.fallback'),
    list: Symbol('instantiate.list') },


  initialize: {
    switch: Symbol('initialize.switch'),
    setter: Symbol('initialize.setter'),
    getter: Symbol('initialize.getter'),
    fallback: Symbol('initialize.fallback'),
    list: Symbol('initialize.list') } };exports.$ = $;





const f = {

  prototypeDelegation: {
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: [$.prototypeDelegation.list] }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: [$.prototypeDelegation.list] }) },

  instantiate: {
    switch: (0, _prototypeMethod.createSwitch)({ fallbackPropertyPath: [$.instantiate.fallback], implementationGetterPropertyPath: [$.instantiate.getter] }),
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: [$.instantiate.list] }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: [$.instantiate.list] }) },

  initialize: {
    switch: (0, _prototypeMethod.createSwitch)({ fallbackPropertyPath: [$.initialize.fallback], implementationGetterPropertyPath: [$.initialize.getter] }),
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: [$.initialize.list] }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: [$.initialize.list] }) } };exports.f = f;




function apply(targetObject) {

  Object.assign(targetObject, {
    [$.prototypeDelegation.getter]: f.prototypeDelegation.getter,
    [$.prototypeDelegation.setter]: f.prototypeDelegation.setter,
    [$.prototypeDelegation.list]: {} });

  Object.assign(targetObject, {
    [$.instantiate.switch]: f.instantiate.switch,
    [$.instantiate.getter]: f.instantiate.getter,
    [$.instantiate.setter]: f.instantiate.setter,
    [$.instantiate.list]: {},
    [$.instantiate.fallback]: undefined });

  Object.assign(targetObject, {
    [$.initialize.switch]: f.initialize.switch,
    [$.initialize.getter]: f.initialize.getter,
    [$.initialize.setter]: f.initialize.setter,
    [$.initialize.list]: {},
    [$.initialize.fallback]: undefined });

  return targetObject;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,