"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.createSwitch = exports.mergeOwnNestedPropertyCurried = exports.nestedPropertyDelegatedLookupCurried = void 0;var _assert = _interopRequireDefault(require("assert"));
var _isGeneratorFunction = require("../../utility/isGeneratorFunction.js");
var _delegatedLookup = require("../../utility/delegatedLookup.js");
var _mergeProperty = require("../../utility/mergeProperty.js");
var _getNestedObject = require("../../utility/getNestedObject.js");

const nestedPropertyDelegatedLookupCurried = ({ baseProperty }) => {
  if (!Array.isArray(baseProperty)) baseProperty = [baseProperty];
  return function (implementationKey, recursive = false, callerClass = this) {
    (0, _assert.default)(implementationKey, `• implementationKey must be passed, cannot be undefined.`);
    return (0, _delegatedLookup.nestedPropertyDelegatedLookup)({
      target: callerClass,
      propertyPath: [...baseProperty, implementationKey],
      recursive });

  };
};exports.nestedPropertyDelegatedLookupCurried = nestedPropertyDelegatedLookupCurried;

const mergeOwnNestedPropertyCurried = ({ property }) => {
  if (!Array.isArray(property)) property = [property];
  return function (implementation) {
    return (0, _mergeProperty.mergeOwnNestedProperty)({ target: this, propertyPath: property, value: implementation });
  };
};exports.mergeOwnNestedPropertyCurried = mergeOwnNestedPropertyCurried;




function lookupImplementation({ implementationKey, fallbackPropertyPath, callerClass = this, implementationGetterPropertyPath, recursiveDelegationChainExecution }) {
  implementationKey || (implementationKey = (0, _getNestedObject.getNestedObject)(callerClass, fallbackPropertyPath));
  let lookupResult;
  let implementationGetter = (0, _getNestedObject.getNestedObject)(callerClass, implementationGetterPropertyPath);
  if (recursiveDelegationChainExecution) {
    lookupResult = implementationGetter.call(callerClass, implementationKey, true);
    (0, _assert.default)(lookupResult && lookupResult.length > 0, `• No implementation constructor found for key ${implementationKey.toString()}`);
  } else {

    lookupResult = implementationGetter.call(callerClass, implementationKey);
    (0, _assert.default)(lookupResult, `• No implementation constructor found for key ${implementationKey && implementationKey.toString() || implementationKey}`);
  }
  if (!Array.isArray(lookupResult)) lookupResult = [lookupResult];

  return lookupResult;
}






const createSwitch = ({ fallbackPropertyPath, implementationGetterPropertyPath }) => {

  return function switchInterface(
  implementationKey,
  {



    recursiveDelegationChainExecution = false,
    executionAlgorithm,
    callerClass = this } =
  {})
  {

    let implementationArray = lookupImplementation.call(callerClass, { implementationKey, fallbackPropertyPath, implementationGetterPropertyPath, recursiveDelegationChainExecution });
    if (implementationArray.length == 0) return function () {};

    {

      function provideAsCallbackInFunctionChain() {
        function createCallbackFunc(targetFunction, superCallback) {
          let funcCallback;






          if ((0, _isGeneratorFunction.isGeneratorFunction)(targetFunction))
          funcCallback = function () {
            let iterator = targetFunction.call(this, ...arguments);
            let iteratorObject = iterator.next({ superCallback });
            (0, _assert.default)(iteratorObject.done, `• Generator implementation function must not yield results, only recieve the superCallback and return a value.`);
            return iteratorObject.value;
          };else
          funcCallback = targetFunction;

          return funcCallback;
        }

        implementationArray.reverse();
        let previousLoopCallback = null;
        for (let index = 0; index < implementationArray.length; index++) {
          let currentFunction = implementationArray[index];
          let callback = createCallbackFunc(currentFunction, previousLoopCallback);
          previousLoopCallback = callback;
        }
        let result = previousLoopCallback.call(callerClass, ...arguments);
        return result;
      }

      switch (executionAlgorithm) {
        case 'provideAsCallbackInFunctionChain':
        default:
          return provideAsCallbackInFunctionChain;
          break;}

    }
  };
};exports.createSwitch = createSwitch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,