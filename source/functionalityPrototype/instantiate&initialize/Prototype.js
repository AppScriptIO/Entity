"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.Prototype = void 0;var _Reference = require("./Reference.js");

var _prototypeMethod = require("../prototypeMethod.js");


const Prototype = {









  [_Reference.Reference.prototypeDelegation.functionality]: {
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: _Reference.Reference.prototypeDelegation.list }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: _Reference.Reference.prototypeDelegation.list }) },

  [_Reference.Reference.prototypeDelegation.list]: {},








  [_Reference.Reference.instantiate.functionality]: {
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: _Reference.Reference.instantiate.list }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: _Reference.Reference.instantiate.list }),
    switch: (0, _prototypeMethod.createSwitchGeneratorFunction)({ fallbackPropertyPath: _Reference.Reference.instantiate.fallback, implementationGetterPropertyPath: [_Reference.Reference.instantiate.functionality, 'getter'] }) },

  [_Reference.Reference.instantiate.list]: {},
  [_Reference.Reference.instantiate.fallback]: undefined,








  [_Reference.Reference.initialize.functionality]: {
    setter: (0, _prototypeMethod.mergeOwnNestedPropertyCurried)({ property: _Reference.Reference.initialize.list }),
    getter: (0, _prototypeMethod.nestedPropertyDelegatedLookupCurried)({ baseProperty: _Reference.Reference.initialize.list }),
    switch: (0, _prototypeMethod.createSwitchGeneratorFunction)({ fallbackPropertyPath: _Reference.Reference.initialize.fallback, implementationGetterPropertyPath: [_Reference.Reference.initialize.functionality, 'getter'] }) },

  [_Reference.Reference.initialize.list]: {},
  [_Reference.Reference.initialize.fallback]: undefined };exports.Prototype = Prototype;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NvdXJjZS9mdW5jdGlvbmFsaXR5UHJvdG90eXBlL2luc3RhbnRpYXRlJmluaXRpYWxpemUvUHJvdG90eXBlLmpzIl0sIm5hbWVzIjpbIlByb3RvdHlwZSIsIlJlZmVyZW5jZSIsInByb3RvdHlwZURlbGVnYXRpb24iLCJmdW5jdGlvbmFsaXR5Iiwic2V0dGVyIiwicHJvcGVydHkiLCJsaXN0IiwiZ2V0dGVyIiwiYmFzZVByb3BlcnR5IiwiaW5zdGFudGlhdGUiLCJzd2l0Y2giLCJmYWxsYmFja1Byb3BlcnR5UGF0aCIsImZhbGxiYWNrIiwiaW1wbGVtZW50YXRpb25HZXR0ZXJQcm9wZXJ0eVBhdGgiLCJ1bmRlZmluZWQiLCJpbml0aWFsaXplIl0sIm1hcHBpbmdzIjoic0dBQUE7O0FBRUE7OztBQUdPLE1BQU1BLFNBQVMsR0FBRzs7Ozs7Ozs7OztBQVV2QixHQUFDQyxxQkFBVUMsbUJBQVYsQ0FBOEJDLGFBQS9CLEdBQStDO0FBQzdDQyxJQUFBQSxNQUFNLEVBQUUsb0RBQThCLEVBQUVDLFFBQVEsRUFBRUoscUJBQVVDLG1CQUFWLENBQThCSSxJQUExQyxFQUE5QixDQURxQztBQUU3Q0MsSUFBQUEsTUFBTSxFQUFFLDJEQUFxQyxFQUFFQyxZQUFZLEVBQUVQLHFCQUFVQyxtQkFBVixDQUE4QkksSUFBOUMsRUFBckMsQ0FGcUMsRUFWeEI7O0FBY3ZCLEdBQUNMLHFCQUFVQyxtQkFBVixDQUE4QkksSUFBL0IsR0FBc0MsRUFkZjs7Ozs7Ozs7O0FBdUJ2QixHQUFDTCxxQkFBVVEsV0FBVixDQUFzQk4sYUFBdkIsR0FBdUM7QUFDckNDLElBQUFBLE1BQU0sRUFBRSxvREFBOEIsRUFBRUMsUUFBUSxFQUFFSixxQkFBVVEsV0FBVixDQUFzQkgsSUFBbEMsRUFBOUIsQ0FENkI7QUFFckNDLElBQUFBLE1BQU0sRUFBRSwyREFBcUMsRUFBRUMsWUFBWSxFQUFFUCxxQkFBVVEsV0FBVixDQUFzQkgsSUFBdEMsRUFBckMsQ0FGNkI7QUFHckNJLElBQUFBLE1BQU0sRUFBRSxvREFBOEIsRUFBRUMsb0JBQW9CLEVBQUVWLHFCQUFVUSxXQUFWLENBQXNCRyxRQUE5QyxFQUF3REMsZ0NBQWdDLEVBQUUsQ0FBQ1oscUJBQVVRLFdBQVYsQ0FBc0JOLGFBQXZCLEVBQXNDLFFBQXRDLENBQTFGLEVBQTlCLENBSDZCLEVBdkJoQjs7QUE0QnZCLEdBQUNGLHFCQUFVUSxXQUFWLENBQXNCSCxJQUF2QixHQUE4QixFQTVCUDtBQTZCdkIsR0FBQ0wscUJBQVVRLFdBQVYsQ0FBc0JHLFFBQXZCLEdBQWtDRSxTQTdCWDs7Ozs7Ozs7O0FBc0N2QixHQUFDYixxQkFBVWMsVUFBVixDQUFxQlosYUFBdEIsR0FBc0M7QUFDcENDLElBQUFBLE1BQU0sRUFBRSxvREFBOEIsRUFBRUMsUUFBUSxFQUFFSixxQkFBVWMsVUFBVixDQUFxQlQsSUFBakMsRUFBOUIsQ0FENEI7QUFFcENDLElBQUFBLE1BQU0sRUFBRSwyREFBcUMsRUFBRUMsWUFBWSxFQUFFUCxxQkFBVWMsVUFBVixDQUFxQlQsSUFBckMsRUFBckMsQ0FGNEI7QUFHcENJLElBQUFBLE1BQU0sRUFBRSxvREFBOEIsRUFBRUMsb0JBQW9CLEVBQUVWLHFCQUFVYyxVQUFWLENBQXFCSCxRQUE3QyxFQUF1REMsZ0NBQWdDLEVBQUUsQ0FBQ1oscUJBQVVjLFVBQVYsQ0FBcUJaLGFBQXRCLEVBQXFDLFFBQXJDLENBQXpGLEVBQTlCLENBSDRCLEVBdENmOztBQTJDdkIsR0FBQ0YscUJBQVVjLFVBQVYsQ0FBcUJULElBQXRCLEdBQTZCLEVBM0NOO0FBNEN2QixHQUFDTCxxQkFBVWMsVUFBVixDQUFxQkgsUUFBdEIsR0FBaUNFLFNBNUNWLEVBQWxCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWZlcmVuY2UgfSBmcm9tICcuL1JlZmVyZW5jZS5qcydcbmltcG9ydCB7IGRlZXBGcmVlemUgfSBmcm9tICcuLi8uLi91dGlsaXR5L2RlZXBPYmplY3RGcmVlemUuanMnXG5pbXBvcnQgeyBjcmVhdGVTd2l0Y2hHZW5lcmF0b3JGdW5jdGlvbiwgbmVzdGVkUHJvcGVydHlEZWxlZ2F0ZWRMb29rdXBDdXJyaWVkLCBtZXJnZU93bk5lc3RlZFByb3BlcnR5Q3VycmllZCB9IGZyb20gJy4uL3Byb3RvdHlwZU1ldGhvZC5qcydcbmltcG9ydCAqIGFzIHN5bWJvbCBmcm9tICcuLi9TeW1ib2wucmVmZXJlbmNlLmpzJ1xuXG5leHBvcnQgY29uc3QgUHJvdG90eXBlID0ge1xuICAvLyBbc3ltYm9sLm1ldGFkYXRhXTogeyB0eXBlOiBTeW1ib2woJ0luc3RhbnRpYXRlICYgSW5pdGlhbGl6ZSBmdW5jdGlvbmFsaXR5JykgfSxcbiAgLypcbiAgICAgICAgICAgICAgICAgICAgIF8gICAgICAgIF8gICAgICAgICAgICAgICAgICAgIF9fX18gICAgICAgXyAgICAgICAgICAgICAgICAgIF8gICBfICAgICAgICAgICAgIFxuICAgICBfIF9fICBfIF9fIF9fXyB8IHxfIF9fXyB8IHxfIF8gICBfIF8gX18gICBfX198ICBfIFxcICBfX198IHwgX19fICBfXyBfICBfXyBffCB8XyhfKSBfX18gIF8gX18gIFxuICAgIHwgJ18gXFx8ICdfXy8gXyBcXHwgX18vIF8gXFx8IF9ffCB8IHwgfCAnXyBcXCAvIF8gXFwgfCB8IHwvIF8gXFwgfC8gXyBcXC8gX2AgfC8gX2AgfCBfX3wgfC8gXyBcXHwgJ18gXFwgXG4gICAgfCB8XykgfCB8IHwgKF8pIHwgfHwgKF8pIHwgfF98IHxffCB8IHxfKSB8ICBfXy8gfF98IHwgIF9fLyB8ICBfXy8gKF98IHwgKF98IHwgfF98IHwgKF8pIHwgfCB8IHxcbiAgICB8IC5fXy98X3wgIFxcX19fLyBcXF9fXFxfX18vIFxcX198XFxfXywgfCAuX18vIFxcX19ffF9fX18vIFxcX19ffF98XFxfX198XFxfXywgfFxcX18sX3xcXF9ffF98XFxfX18vfF98IHxffFxuICAgIHxffCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxfX18vfF98ICAgICAgICAgICAgICAgICAgICAgICAgICAgfF9fXy8gICAgICAgICAgICAgICAgICAgICAgICAgXG4qL1xuICBbUmVmZXJlbmNlLnByb3RvdHlwZURlbGVnYXRpb24uZnVuY3Rpb25hbGl0eV06IHtcbiAgICBzZXR0ZXI6IG1lcmdlT3duTmVzdGVkUHJvcGVydHlDdXJyaWVkKHsgcHJvcGVydHk6IFJlZmVyZW5jZS5wcm90b3R5cGVEZWxlZ2F0aW9uLmxpc3QgfSksXG4gICAgZ2V0dGVyOiBuZXN0ZWRQcm9wZXJ0eURlbGVnYXRlZExvb2t1cEN1cnJpZWQoeyBiYXNlUHJvcGVydHk6IFJlZmVyZW5jZS5wcm90b3R5cGVEZWxlZ2F0aW9uLmxpc3QgfSksXG4gIH0sXG4gIFtSZWZlcmVuY2UucHJvdG90eXBlRGVsZWdhdGlvbi5saXN0XToge30sXG5cbiAgLypcbiAgICAgXyAgICAgICAgICAgXyAgICAgICAgICAgICAgXyAgIF8gICAgICAgXyAgICAgICBcbiAgICAoXylfIF9fICBfX198IHxfIF9fIF8gXyBfXyB8IHxfKF8pIF9fIF98IHxfIF9fXyBcbiAgICB8IHwgJ18gXFwvIF9ffCBfXy8gX2AgfCAnXyBcXHwgX198IHwvIF9gIHwgX18vIF8gXFxcbiAgICB8IHwgfCB8IFxcX18gXFwgfHwgKF98IHwgfCB8IHwgfF98IHwgKF98IHwgfHwgIF9fL1xuICAgIHxffF98IHxffF9fXy9cXF9fXFxfXyxffF98IHxffFxcX198X3xcXF9fLF98XFxfX1xcX19ffFxuKi9cbiAgW1JlZmVyZW5jZS5pbnN0YW50aWF0ZS5mdW5jdGlvbmFsaXR5XToge1xuICAgIHNldHRlcjogbWVyZ2VPd25OZXN0ZWRQcm9wZXJ0eUN1cnJpZWQoeyBwcm9wZXJ0eTogUmVmZXJlbmNlLmluc3RhbnRpYXRlLmxpc3QgfSksXG4gICAgZ2V0dGVyOiBuZXN0ZWRQcm9wZXJ0eURlbGVnYXRlZExvb2t1cEN1cnJpZWQoeyBiYXNlUHJvcGVydHk6IFJlZmVyZW5jZS5pbnN0YW50aWF0ZS5saXN0IH0pLFxuICAgIHN3aXRjaDogY3JlYXRlU3dpdGNoR2VuZXJhdG9yRnVuY3Rpb24oeyBmYWxsYmFja1Byb3BlcnR5UGF0aDogUmVmZXJlbmNlLmluc3RhbnRpYXRlLmZhbGxiYWNrLCBpbXBsZW1lbnRhdGlvbkdldHRlclByb3BlcnR5UGF0aDogW1JlZmVyZW5jZS5pbnN0YW50aWF0ZS5mdW5jdGlvbmFsaXR5LCAnZ2V0dGVyJ10gfSksXG4gIH0sXG4gIFtSZWZlcmVuY2UuaW5zdGFudGlhdGUubGlzdF06IHt9LFxuICBbUmVmZXJlbmNlLmluc3RhbnRpYXRlLmZhbGxiYWNrXTogdW5kZWZpbmVkLFxuXG4gIC8qXG4gICAgIF8gICAgICAgXyBfICAgXyAgICAgICBfIF8gICAgICAgICBcbiAgICAoXylfIF9fIChfKSB8XyhfKSBfXyBffCAoXylfX19fX19fIFxuICAgIHwgfCAnXyBcXHwgfCBfX3wgfC8gX2AgfCB8IHxfICAvIF8gXFxcbiAgICB8IHwgfCB8IHwgfCB8X3wgfCAoX3wgfCB8IHwvIC8gIF9fL1xuICAgIHxffF98IHxffF98XFxfX3xffFxcX18sX3xffF8vX19fXFxfX198XG4qL1xuICBbUmVmZXJlbmNlLmluaXRpYWxpemUuZnVuY3Rpb25hbGl0eV06IHtcbiAgICBzZXR0ZXI6IG1lcmdlT3duTmVzdGVkUHJvcGVydHlDdXJyaWVkKHsgcHJvcGVydHk6IFJlZmVyZW5jZS5pbml0aWFsaXplLmxpc3QgfSksXG4gICAgZ2V0dGVyOiBuZXN0ZWRQcm9wZXJ0eURlbGVnYXRlZExvb2t1cEN1cnJpZWQoeyBiYXNlUHJvcGVydHk6IFJlZmVyZW5jZS5pbml0aWFsaXplLmxpc3QgfSksXG4gICAgc3dpdGNoOiBjcmVhdGVTd2l0Y2hHZW5lcmF0b3JGdW5jdGlvbih7IGZhbGxiYWNrUHJvcGVydHlQYXRoOiBSZWZlcmVuY2UuaW5pdGlhbGl6ZS5mYWxsYmFjaywgaW1wbGVtZW50YXRpb25HZXR0ZXJQcm9wZXJ0eVBhdGg6IFtSZWZlcmVuY2UuaW5pdGlhbGl6ZS5mdW5jdGlvbmFsaXR5LCAnZ2V0dGVyJ10gfSksXG4gIH0sXG4gIFtSZWZlcmVuY2UuaW5pdGlhbGl6ZS5saXN0XToge30sXG4gIFtSZWZlcmVuY2UuaW5pdGlhbGl6ZS5mYWxsYmFja106IHVuZGVmaW5lZCxcbn1cbiJdfQ==