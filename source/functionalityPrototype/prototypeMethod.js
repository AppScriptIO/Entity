"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.createSwitchGeneratorFunction = exports.nestedPropertyDelegatedLookupAdapter = void 0;var _skipFirstGeneratorNext2 = _interopRequireDefault(require("@babel/runtime/helpers/skipFirstGeneratorNext"));var _assert = _interopRequireDefault(require("assert"));
var _isGeneratorFunction = require("../utility/isGeneratorFunction.js");
var _generatorExecutionControl = require("../utility/generatorExecutionControl.js");
var _nestedPropertyDelefatedLookup = require("../utility/nestedPropertyDelefatedLookup.js");

const nestedPropertyDelegatedLookupAdapter = ({ baseProperty }) =>
function (implementationKey, recursive = false, callerClass = this) {
  return (0, _nestedPropertyDelefatedLookup.nestedPropertyDelegatedLookup)({
    target: callerClass,
    baseProperty,
    nestedProperty: implementationKey,
    recursive });

};exports.nestedPropertyDelegatedLookupAdapter = nestedPropertyDelegatedLookupAdapter;


const createSwitchGeneratorFunction = function ({
  fallbackSymbol,
  implementationGetterSymbol })
{
  let generatorFunction = (function () {let _ref = function* ({
      implementationKey,



      recursiveDelegationChainExecution = false,
      callerClass = this } =
    {}) {let _functionSent = yield;
      const controlArg = _functionSent,
      shouldHandOver = _generatorExecutionControl.executionControl.shouldHandOver(controlArg),
      shouldPropagate = _generatorExecutionControl.executionControl.shouldPropagate(controlArg);

      implementationKey || (implementationKey = callerClass[fallbackSymbol]);

      let implementation, lookupResult;
      if (recursiveDelegationChainExecution) {var _context;
        lookupResult = (_context = callerClass, callerClass[implementationGetterSymbol]).call(_context, implementationKey, true);
        (0, _assert.default)(lookupResult && lookupResult.length > 0, `• No implementation constructor found for key ${implementationKey.toString()}`);
      } else {var _context2;

        lookupResult = (_context2 = callerClass, callerClass[implementationGetterSymbol]).call(_context2, implementationKey);
        (0, _assert.default)(lookupResult, `• No implementation constructor found for key ${implementationKey.toString()}`);
      }
      if (!Array.isArray(lookupResult)) lookupResult = [lookupResult];
      implementation = lookupResult.map((func, index) => {
        return { func: func, passThroughArg: {} };
      });

      let result = null;
      for (let index in implementation) {var _context3;

        if (shouldHandOver) implementation[index].passThroughArg = _functionSent = yield implementation[index].passThroughArg;
        let currentResult = (_context3 = callerClass, implementation[index].func).call(_context3, implementation[index].passThroughArg, result);


        if ((0, _isGeneratorFunction.isGeneratorFunction)(implementation[index].func)) {
          if (shouldPropagate) {


            result = _functionSent = yield* currentResult;
          } else {var _g;
            result = (_g = currentResult, _g.next('complete').value);
          }
        } else {

          result = currentResult;
        }
      }

      return result;
    },_ref2 = (0, _skipFirstGeneratorNext2.default)(_ref);return new Proxy(_ref, { apply(target, thisArgument, argumentsList) {return Reflect.apply(_ref2, thisArgument, argumentsList);} });})();

  return generatorFunction;
};exports.createSwitchGeneratorFunction = createSwitchGeneratorFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,