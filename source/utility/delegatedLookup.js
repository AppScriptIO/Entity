"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.delegatedLookup = exports.conditionDelegatedLookup = exports.nestedPropertyDelegatedLookup = void 0;var _assert = _interopRequireDefault(require("assert"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");

const hasOwnProperty = Object.prototype.hasOwnProperty;




const nestedPropertyDelegatedLookup = ({
  target,
  recursive = false,
  propertyPath }) =>


{
  return delegatedLookup({
    target,
    recursive,

    retrieveValueFromPrototype: targetObject => {
      if (!Array.isArray(propertyPath)) propertyPath = [propertyPath];
      for (let property of propertyPath) {
        let targetPropertyArray = [...Object.keys(Object.getOwnPropertyDescriptors(targetObject)), ...Object.getOwnPropertySymbols(targetObject)];
        if (targetPropertyArray.includes(property)) targetObject = targetObject[property];else
        return undefined;
      }
      let propertyValue = targetObject;
      return propertyValue;
    } });

};exports.nestedPropertyDelegatedLookup = nestedPropertyDelegatedLookup;


const conditionDelegatedLookup = ({
  target,
  recursive = false,
  conditionCheck = prototypeTarget => prototypeTarget.constructor == Object }) =>
{
  (0, _assert.default)(conditionCheck, 'â€¢ conditionCheck callback should be passed parameter.');
  return delegatedLookup({
    target,
    recursive,

    retrieveValueFromPrototype: targetObject => conditionCheck(targetObject) ? targetObject : undefined });

};exports.conditionDelegatedLookup = conditionDelegatedLookup;


const delegatedLookup = ({
  target,
  recursive = false,
  property,

  retrieveValueFromPrototype = (target, property) => target[property] ? target[property] : undefined } =
{}) => {
  let valueAggregatorArray = [],
  breakOnFirstMatch = !recursive,
  prototypeQueue = [target],
  visitedObject = new Set();

  let index = 0;
  do {
    let currentTarget = prototypeQueue[index];
    if (visitedObject.has(currentTarget)) {
      index++;
      continue;
    } else visitedObject.add(currentTarget);

    let retrievedValue = retrieveValueFromPrototype(currentTarget, property);
    if (retrievedValue != undefined) valueAggregatorArray.push(retrievedValue);

    if (breakOnFirstMatch && valueAggregatorArray.length > 0) break;

    let targetPrototpye = Object.getPrototypeOf(currentTarget);

    if (Array.isArray(targetPrototpye) && currentTarget instanceof _multiplePrototypeDelegation.MultipleDelegation) {
      prototypeQueue = prototypeQueue.concat(targetPrototpye);
    } else if (targetPrototpye) {
        prototypeQueue.push(targetPrototpye);
      }
    index++;
  } while (
  prototypeQueue.length > index &&
  !(breakOnFirstMatch && valueAggregatorArray.length > 0));


  return recursive ? valueAggregatorArray : valueAggregatorArray[0];
};exports.delegatedLookup = delegatedLookup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,