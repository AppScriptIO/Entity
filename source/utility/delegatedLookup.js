"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.delegatedLookup = exports.conditionDelegatedLookup = exports.nestedPropertyDelegatedLookup = void 0;var _assert = _interopRequireDefault(require("assert"));
var _multiplePrototypeDelegation = require("@dependency/multiplePrototypeDelegation");

const hasOwnProperty = Object.prototype.hasOwnProperty;




const nestedPropertyDelegatedLookup = ({
  target,
  recursive = false,
  propertyPath }) =>


{
  return delegatedLookup({
    target,
    recursive,

    retrieveValueFromPrototype: targetObject => {
      if (!Array.isArray(propertyPath)) propertyPath = [propertyPath];
      for (let property of propertyPath) {
        let targetPropertyArray = [...Object.keys(Object.getOwnPropertyDescriptors(targetObject)), ...Object.getOwnPropertySymbols(targetObject)];
        if (targetPropertyArray.includes(property)) targetObject = targetObject[property];else
        return undefined;
      }
      let propertyValue = targetObject;
      return propertyValue;
    } });

};exports.nestedPropertyDelegatedLookup = nestedPropertyDelegatedLookup;


const conditionDelegatedLookup = ({
  target,
  recursive = false,
  conditionCheck = false || (prototypeTarget => prototypeTarget.constructor == Object) }) =>
{
  (0, _assert.default)(conditionCheck, 'â€¢ conditionCheck callback should be passed parameter.');
  return delegatedLookup({
    target,
    recursive,

    retrieveValueFromPrototype: targetObject => {
      return conditionCheck(targetObject) ? targetObject : undefined;
    } });

};exports.conditionDelegatedLookup = conditionDelegatedLookup;


const delegatedLookup = ({
  target,
  recursive = false,
  property,

  retrieveValueFromPrototype = (target, property) => target[property] ? target[property] : undefined } =
{}) => {
  let valueAggregatorArray = [],
  breakOnFirstMatch = !recursive,
  prototypeQueue = [target];
  while (
  prototypeQueue.length != 0 &&
  !(breakOnFirstMatch && valueAggregatorArray.length > 0))
  {
    let targetAggregator = [];
    for (let currentTarget of prototypeQueue) {
      let retrievedValue = retrieveValueFromPrototype(currentTarget, property);
      if (retrievedValue != undefined) valueAggregatorArray.push(retrievedValue);

      if (breakOnFirstMatch && valueAggregatorArray.length > 0) break;

      let targetPrototpye = Object.getPrototypeOf(currentTarget);

      if (Array.isArray(targetPrototpye) && currentTarget instanceof _multiplePrototypeDelegation.MultipleDelegation) {
        targetAggregator = [...targetAggregator, ...targetPrototpye];
      } else if (targetPrototpye) {
          targetAggregator.push(targetPrototpye);
        }
    }
    prototypeQueue = targetAggregator;
  }
  return recursive ? valueAggregatorArray : valueAggregatorArray[0];
};exports.delegatedLookup = delegatedLookup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,