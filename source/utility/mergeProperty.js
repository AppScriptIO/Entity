"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.deepMergeParameter = deepMergeParameter;exports.mergeNonexistentProperties = exports.mergeOwnNestedProperty = void 0;var _assert = _interopRequireDefault(require("assert"));
var _deepmerge = _interopRequireDefault(require("deepmerge"));
const hasOwnProperty = Object.prototype.hasOwnProperty;


const mergeOwnNestedProperty = ({ target, propertyPath, value }) => {
  (0, _assert.default)(propertyPath, 'â€¢ `propertyPath` must be passed.');

  if (!Array.isArray(propertyPath)) propertyPath = [propertyPath];
  let targetProperty = target;
  for (let index in propertyPath) {
    if (!hasOwnProperty.call(targetProperty, propertyPath[index])) {

      Object.defineProperty(targetProperty, propertyPath[index], { enumerable: true, writable: true, value: {} });
    }
    targetProperty = targetProperty[propertyPath[index]];
  }
  Object.assign(targetProperty, value);
  return target;
};exports.mergeOwnNestedProperty = mergeOwnNestedProperty;


const mergeNonexistentProperties = (targetObject, defaultValue) => {

  let propertyKey = [...Object.getOwnPropertySymbols(defaultValue), ...Object.getOwnPropertyNames(defaultValue)];
  let propertyDescriptor = Object.getOwnPropertyDescriptors(defaultValue);
  propertyKey.forEach(key => {
    if (!hasOwnProperty.call(targetObject, key)) Object.defineProperty(targetObject, key, propertyDescriptor[key]);
  });
};exports.mergeNonexistentProperties = mergeNonexistentProperties;


const concatinateArrayMerge = (defaultList, overridingList, options) => {
  const destination = defaultList.slice();
  destination.concat(overridingList);
  return destination;
};

const combineArrayMerge = (defaultList, overridingList, options) => {
  const destination = defaultList.slice();
  overridingList.forEach((item, index) => {
    if (typeof destination[index] === 'undefined') {
      destination[index] = options.cloneUnlessOtherwiseSpecified(item, options);
    } else if (options.isMergeableObject(item)) {
      destination[index] = (0, _deepmerge.default)(defaultList[index], item, { arrayMerge: concatinateArrayMerge });
    } else if (defaultList.indexOf(item) === -1) {
      destination.push(item);
    }
  });
  return destination;
};








const deepMergeArgumentArray = ({ overridingArray, defaultArray }) => {

  return (0, _deepmerge.default)(defaultArray, overridingArray, { arrayMerge: combineArrayMerge });
};






function deepMergeParameter(targetArgArray, ...defaultArgumentListArray) {
  for (let defaultArray of defaultArgumentListArray) targetArgArray = deepMergeArgumentArray({ overridingArray: targetArgArray, defaultArray });
  return targetArgArray;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,